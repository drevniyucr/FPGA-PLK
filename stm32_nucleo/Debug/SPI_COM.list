
SPI_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005000  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005200  08005200  00006200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005260  08005260  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005260  08005260  00006260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005268  08005268  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005268  08005268  00006268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800526c  0800526c  0000626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005270  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  080052cc  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080052cc  000072b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d41f  00000000  00000000  0000708a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f70  00000000  00000000  000144a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00016420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081a  00000000  00000000  00016eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cc5  00000000  00000000  000176ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0b8  00000000  00000000  0003e38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f21c4  00000000  00000000  0004c447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e60b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb8  00000000  00000000  0013e650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00141608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	080051e8 	.word	0x080051e8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	080051e8 	.word	0x080051e8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <byte_to_binary>:
#define BUFFER_SIZE 8
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void byte_to_binary(uint8_t byte, char *binary_str) {
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
    for (int i = 7; i >= 0; i--) {
 80005ec:	2307      	movs	r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	e014      	b.n	800061c <byte_to_binary+0x3c>
        binary_str[7 - i] = (byte & (1 << i)) ? '1' : '0';
 80005f2:	79fa      	ldrb	r2, [r7, #7]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	fa42 f303 	asr.w	r3, r2, r3
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <byte_to_binary+0x26>
 8000602:	2231      	movs	r2, #49	@ 0x31
 8000604:	e000      	b.n	8000608 <byte_to_binary+0x28>
 8000606:	2230      	movs	r2, #48	@ 0x30
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f1c3 0307 	rsb	r3, r3, #7
 800060e:	4619      	mov	r1, r3
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	440b      	add	r3, r1
 8000614:	701a      	strb	r2, [r3, #0]
    for (int i = 7; i >= 0; i--) {
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3b01      	subs	r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b00      	cmp	r3, #0
 8000620:	dae7      	bge.n	80005f2 <byte_to_binary+0x12>
    }
    binary_str[8] = '\0';  // Завершающий нулевой символ
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	3308      	adds	r3, #8
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
	...

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b0a6      	sub	sp, #152	@ 0x98
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fc22 	bl	8000e86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f88f 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f969 	bl	800091c <MX_GPIO_Init>
  MX_SPI3_Init();
 800064a:	f000 f8fd 	bl	8000848 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 800064e:	f000 f935 	bl	80008bc <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1) {
       // Приём данных по SPI
       if (HAL_SPI_Receive(&hspi3, spi_rx_buffer, BUFFER_SIZE, HAL_MAX_DELAY) == HAL_OK) {
 8000652:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	2208      	movs	r2, #8
 800065c:	483c      	ldr	r0, [pc, #240]	@ (8000750 <main+0x118>)
 800065e:	f002 f9e0 	bl	8002a22 <HAL_SPI_Receive>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <main+0x1a>
           char binary_str[9];  // Буфер для одного байта в двоичном формате

           // Формирование строки с данными в двоичном формате
           snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "Received:\r\n");
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4a39      	ldr	r2, [pc, #228]	@ (8000754 <main+0x11c>)
 800066e:	2178      	movs	r1, #120	@ 0x78
 8000670:	4618      	mov	r0, r3
 8000672:	f004 f8f1 	bl	8004858 <sniprintf>
           for (int i = 0; i < BUFFER_SIZE; i++) {
 8000676:	2300      	movs	r3, #0
 8000678:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800067c:	e032      	b.n	80006e4 <main+0xac>
               byte_to_binary(spi_rx_buffer[i], binary_str);
 800067e:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8000682:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	1d3a      	adds	r2, r7, #4
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ffa6 	bl	80005e0 <byte_to_binary>
               strncat(uart_tx_buffer, binary_str, sizeof(uart_tx_buffer) - strlen(uart_tx_buffer) - 1);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fdd1 	bl	8000240 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	f1c3 0277 	rsb	r2, r3, #119	@ 0x77
 80006a4:	1d39      	adds	r1, r7, #4
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 f910 	bl	80048d0 <strncat>
               strncat(uart_tx_buffer, " ", sizeof(uart_tx_buffer) - strlen(uart_tx_buffer) - 1);
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fdc3 	bl	8000240 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	f1c3 0277 	rsb	r2, r3, #119	@ 0x77
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4924      	ldr	r1, [pc, #144]	@ (8000758 <main+0x120>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 f902 	bl	80048d0 <strncat>
               spi_rx_buffer[i] = 0;
 80006cc:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80006d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80006d4:	4413      	add	r3, r2
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
           for (int i = 0; i < BUFFER_SIZE; i++) {
 80006da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80006de:	3301      	adds	r3, #1
 80006e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80006e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80006e8:	2b07      	cmp	r3, #7
 80006ea:	ddc8      	ble.n	800067e <main+0x46>
           }
           strncat(uart_tx_buffer, "\r\n", sizeof(uart_tx_buffer) - strlen(uart_tx_buffer) - 1);
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fda5 	bl	8000240 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f1c3 0277 	rsb	r2, r3, #119	@ 0x77
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4916      	ldr	r1, [pc, #88]	@ (800075c <main+0x124>)
 8000702:	4618      	mov	r0, r3
 8000704:	f004 f8e4 	bl	80048d0 <strncat>

           // Передача данных через UART
           HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buffer, strlen(uart_tx_buffer), HAL_MAX_DELAY);
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fd97 	bl	8000240 <strlen>
 8000712:	4603      	mov	r3, r0
 8000714:	b29a      	uxth	r2, r3
 8000716:	f107 0110 	add.w	r1, r7, #16
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	4810      	ldr	r0, [pc, #64]	@ (8000760 <main+0x128>)
 8000720:	f003 f83e 	bl	80037a0 <HAL_UART_Transmit>
           for (int i = 0; i<120;i++){
 8000724:	2300      	movs	r3, #0
 8000726:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800072a:	e00b      	b.n	8000744 <main+0x10c>
        	   uart_tx_buffer[i] = 0;
 800072c:	f107 0210 	add.w	r2, r7, #16
 8000730:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000734:	4413      	add	r3, r2
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
           for (int i = 0; i<120;i++){
 800073a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800073e:	3301      	adds	r3, #1
 8000740:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000744:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000748:	2b77      	cmp	r3, #119	@ 0x77
 800074a:	ddef      	ble.n	800072c <main+0xf4>
       if (HAL_SPI_Receive(&hspi3, spi_rx_buffer, BUFFER_SIZE, HAL_MAX_DELAY) == HAL_OK) {
 800074c:	e781      	b.n	8000652 <main+0x1a>
 800074e:	bf00      	nop
 8000750:	20000078 	.word	0x20000078
 8000754:	08005200 	.word	0x08005200
 8000758:	0800520c 	.word	0x0800520c
 800075c:	08005210 	.word	0x08005210
 8000760:	200000dc 	.word	0x200000dc

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	@ 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2234      	movs	r2, #52	@ 0x34
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 f8a4 	bl	80048c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000788:	f000 ff44 	bl	8001614 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	4b2c      	ldr	r3, [pc, #176]	@ (8000840 <SystemClock_Config+0xdc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	4a2b      	ldr	r2, [pc, #172]	@ (8000840 <SystemClock_Config+0xdc>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	@ 0x40
 8000798:	4b29      	ldr	r3, [pc, #164]	@ (8000840 <SystemClock_Config+0xdc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a4:	4b27      	ldr	r3, [pc, #156]	@ (8000844 <SystemClock_Config+0xe0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007ac:	4a25      	ldr	r2, [pc, #148]	@ (8000844 <SystemClock_Config+0xe0>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <SystemClock_Config+0xe0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007d8:	2360      	movs	r3, #96	@ 0x60
 80007da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 ff71 	bl	80016d4 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f8:	f000 f994 	bl	8000b24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007fc:	f000 ff1a 	bl	8001634 <HAL_PWREx_EnableOverDrive>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000806:	f000 f98d 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2302      	movs	r3, #2
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2103      	movs	r1, #3
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fa02 	bl	8001c30 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000832:	f000 f977 	bl	8000b24 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	@ 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 800084e:	4a1a      	ldr	r2, [pc, #104]	@ (80008b8 <MX_SPI3_Init+0x70>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 800085a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800085e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 8000862:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000866:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 8000876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800087a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087c:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 8000884:	2200      	movs	r2, #0
 8000886:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 8000890:	2207      	movs	r2, #7
 8000892:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 8000896:	2200      	movs	r2, #0
 8000898:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 800089c:	2200      	movs	r2, #0
 800089e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_SPI3_Init+0x6c>)
 80008a2:	f002 f813 	bl	80028cc <HAL_SPI_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 80008ac:	f000 f93a 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000078 	.word	0x20000078
 80008b8:	40003c00 	.word	0x40003c00

080008bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_USART3_UART_Init+0x58>)
 80008c2:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <MX_USART3_UART_Init+0x5c>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <MX_USART3_UART_Init+0x58>)
 80008c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_USART3_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_USART3_UART_Init+0x58>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_USART3_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_USART3_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_USART3_UART_Init+0x58>)
 8000900:	f002 ff00 	bl	8003704 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 f90b 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000dc 	.word	0x200000dc
 8000918:	40004800 	.word	0x40004800

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	@ 0x30
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b77      	ldr	r3, [pc, #476]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a76      	ldr	r2, [pc, #472]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b74      	ldr	r3, [pc, #464]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	4b71      	ldr	r3, [pc, #452]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a70      	ldr	r2, [pc, #448]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b6e      	ldr	r3, [pc, #440]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b6b      	ldr	r3, [pc, #428]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a6a      	ldr	r2, [pc, #424]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b68      	ldr	r3, [pc, #416]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b65      	ldr	r3, [pc, #404]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a64      	ldr	r2, [pc, #400]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b62      	ldr	r3, [pc, #392]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	4b5f      	ldr	r3, [pc, #380]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a5e      	ldr	r2, [pc, #376]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b5c      	ldr	r3, [pc, #368]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009aa:	4b59      	ldr	r3, [pc, #356]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a58      	ldr	r2, [pc, #352]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 80009b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b56      	ldr	r3, [pc, #344]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009c8:	4852      	ldr	r0, [pc, #328]	@ (8000b14 <MX_GPIO_Init+0x1f8>)
 80009ca:	f000 fe09 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2140      	movs	r1, #64	@ 0x40
 80009d2:	4851      	ldr	r0, [pc, #324]	@ (8000b18 <MX_GPIO_Init+0x1fc>)
 80009d4:	f000 fe04 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	484b      	ldr	r0, [pc, #300]	@ (8000b1c <MX_GPIO_Init+0x200>)
 80009f0:	f000 fc4a 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009f4:	2332      	movs	r3, #50	@ 0x32
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a04:	230b      	movs	r3, #11
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4843      	ldr	r0, [pc, #268]	@ (8000b1c <MX_GPIO_Init+0x200>)
 8000a10:	f000 fc3a 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a14:	2386      	movs	r3, #134	@ 0x86
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a24:	230b      	movs	r3, #11
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	483c      	ldr	r0, [pc, #240]	@ (8000b20 <MX_GPIO_Init+0x204>)
 8000a30:	f000 fc2a 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a34:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4831      	ldr	r0, [pc, #196]	@ (8000b14 <MX_GPIO_Init+0x1f8>)
 8000a4e:	f000 fc1b 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a64:	230b      	movs	r3, #11
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4829      	ldr	r0, [pc, #164]	@ (8000b14 <MX_GPIO_Init+0x1f8>)
 8000a70:	f000 fc0a 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a74:	2340      	movs	r3, #64	@ 0x40
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4823      	ldr	r0, [pc, #140]	@ (8000b18 <MX_GPIO_Init+0x1fc>)
 8000a8c:	f000 fbfc 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481d      	ldr	r0, [pc, #116]	@ (8000b18 <MX_GPIO_Init+0x1fc>)
 8000aa4:	f000 fbf0 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000aa8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aba:	230a      	movs	r3, #10
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4816      	ldr	r0, [pc, #88]	@ (8000b20 <MX_GPIO_Init+0x204>)
 8000ac6:	f000 fbdf 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000aca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4810      	ldr	r0, [pc, #64]	@ (8000b20 <MX_GPIO_Init+0x204>)
 8000ae0:	f000 fbd2 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ae4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af6:	230b      	movs	r3, #11
 8000af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_GPIO_Init+0x1fc>)
 8000b02:	f000 fbc1 	bl	8001288 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	@ 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40021800 	.word	0x40021800
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020000 	.word	0x40020000

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800

08000b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a29      	ldr	r2, [pc, #164]	@ (8000c3c <HAL_SPI_MspInit+0xc4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d14c      	bne.n	8000c34 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b9a:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <HAL_SPI_MspInit+0xc8>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	4a28      	ldr	r2, [pc, #160]	@ (8000c40 <HAL_SPI_MspInit+0xc8>)
 8000ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba6:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <HAL_SPI_MspInit+0xc8>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <HAL_SPI_MspInit+0xc8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a22      	ldr	r2, [pc, #136]	@ (8000c40 <HAL_SPI_MspInit+0xc8>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b20      	ldr	r3, [pc, #128]	@ (8000c40 <HAL_SPI_MspInit+0xc8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <HAL_SPI_MspInit+0xc8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a1c      	ldr	r2, [pc, #112]	@ (8000c40 <HAL_SPI_MspInit+0xc8>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <HAL_SPI_MspInit+0xc8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000be2:	2304      	movs	r3, #4
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4811      	ldr	r0, [pc, #68]	@ (8000c44 <HAL_SPI_MspInit+0xcc>)
 8000bfe:	f000 fb43 	bl	8001288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c14:	2306      	movs	r3, #6
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480a      	ldr	r0, [pc, #40]	@ (8000c48 <HAL_SPI_MspInit+0xd0>)
 8000c20:	f000 fb32 	bl	8001288 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2033      	movs	r0, #51	@ 0x33
 8000c2a:	f000 fa64 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000c2e:	2033      	movs	r0, #51	@ 0x33
 8000c30:	f000 fa7d 	bl	800112e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	@ 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40003c00 	.word	0x40003c00
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020800 	.word	0x40020800

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0ae      	sub	sp, #184	@ 0xb8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2290      	movs	r2, #144	@ 0x90
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fe27 	bl	80048c0 <memset>
  if(huart->Instance==USART3)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a26      	ldr	r2, [pc, #152]	@ (8000d10 <HAL_UART_MspInit+0xc4>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d144      	bne.n	8000d06 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 f9f6 	bl	800207c <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c96:	f7ff ff45 	bl	8000b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <HAL_UART_MspInit+0xc8>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8000d14 <HAL_UART_MspInit+0xc8>)
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <HAL_UART_MspInit+0xc8>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_UART_MspInit+0xc8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a17      	ldr	r2, [pc, #92]	@ (8000d14 <HAL_UART_MspInit+0xc8>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_UART_MspInit+0xc8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4809      	ldr	r0, [pc, #36]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cf2:	f000 fac9 	bl	8001288 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2027      	movs	r0, #39	@ 0x27
 8000cfc:	f000 f9fb 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d00:	2027      	movs	r0, #39	@ 0x27
 8000d02:	f000 fa14 	bl	800112e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d06:	bf00      	nop
 8000d08:	37b8      	adds	r7, #184	@ 0xb8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40004800 	.word	0x40004800
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020c00 	.word	0x40020c00

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <NMI_Handler+0x4>

08000d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <MemManage_Handler+0x4>

08000d34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d72:	f000 f8c5 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d80:	4802      	ldr	r0, [pc, #8]	@ (8000d8c <USART3_IRQHandler+0x10>)
 8000d82:	f002 fd97 	bl	80038b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000dc 	.word	0x200000dc

08000d90 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000d94:	4802      	ldr	r0, [pc, #8]	@ (8000da0 <SPI3_IRQHandler+0x10>)
 8000d96:	f002 f99d 	bl	80030d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000078 	.word	0x20000078

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	@ (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f003 fd90 	bl	80048f8 <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20080000 	.word	0x20080000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	20000164 	.word	0x20000164
 8000e0c:	200002b8 	.word	0x200002b8

08000e10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e38:	f7ff ffea 	bl	8000e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e3c:	480c      	ldr	r0, [pc, #48]	@ (8000e70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3e:	490d      	ldr	r1, [pc, #52]	@ (8000e74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e40:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e54:	4c0a      	ldr	r4, [pc, #40]	@ (8000e80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f003 fd4f 	bl	8004904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e66:	f7ff fbe7 	bl	8000638 <main>
  bx  lr    
 8000e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e78:	08005270 	.word	0x08005270
  ldr r2, =_sbss
 8000e7c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e80:	200002b4 	.word	0x200002b4

08000e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC_IRQHandler>

08000e86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f000 f928 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 f805 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e96:	f7ff fe4b 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f943 	bl	800114a <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f90b 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000168 	.word	0x20000168

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000168 	.word	0x20000168

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x40>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x40>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00
 8000f84:	05fa0000 	.word	0x05fa0000

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db0b      	blt.n	8000fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f003 021f 	and.w	r2, r3, #31
 8000fbc:	4907      	ldr	r1, [pc, #28]	@ (8000fdc <__NVIC_EnableIRQ+0x38>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	@ (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	@ (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	@ 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	@ 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff29 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff3e 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff31 	bl	8000fa4 <__NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffa2 	bl	800109c <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff feda 	bl	8000f28 <HAL_GetTick>
 8001174:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d008      	beq.n	8001194 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2280      	movs	r2, #128	@ 0x80
 8001186:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e052      	b.n	800123a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0216 	bic.w	r2, r2, #22
 80011a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	695a      	ldr	r2, [r3, #20]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d103      	bne.n	80011c4 <HAL_DMA_Abort+0x62>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0208 	bic.w	r2, r2, #8
 80011d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0201 	bic.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e4:	e013      	b.n	800120e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011e6:	f7ff fe9f 	bl	8000f28 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d90c      	bls.n	800120e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2220      	movs	r2, #32
 80011f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2203      	movs	r2, #3
 80011fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e015      	b.n	800123a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1e4      	bne.n	80011e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001220:	223f      	movs	r2, #63	@ 0x3f
 8001222:	409a      	lsls	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d004      	beq.n	8001260 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2280      	movs	r2, #128	@ 0x80
 800125a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e00c      	b.n	800127a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2205      	movs	r2, #5
 8001264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	e175      	b.n	8001594 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012a8:	2201      	movs	r2, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 8164 	bne.w	800158e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d005      	beq.n	80012de <HAL_GPIO_Init+0x56>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d130      	bne.n	8001340 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 0201 	and.w	r2, r3, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b03      	cmp	r3, #3
 800134a:	d017      	beq.n	800137c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d123      	bne.n	80013d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3208      	adds	r2, #8
 8001390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	220f      	movs	r2, #15
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	08da      	lsrs	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3208      	adds	r2, #8
 80013ca:	69b9      	ldr	r1, [r7, #24]
 80013cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80be 	beq.w	800158e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	4b66      	ldr	r3, [pc, #408]	@ (80015ac <HAL_GPIO_Init+0x324>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	4a65      	ldr	r2, [pc, #404]	@ (80015ac <HAL_GPIO_Init+0x324>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800141c:	6453      	str	r3, [r2, #68]	@ 0x44
 800141e:	4b63      	ldr	r3, [pc, #396]	@ (80015ac <HAL_GPIO_Init+0x324>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800142a:	4a61      	ldr	r2, [pc, #388]	@ (80015b0 <HAL_GPIO_Init+0x328>)
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a58      	ldr	r2, [pc, #352]	@ (80015b4 <HAL_GPIO_Init+0x32c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d037      	beq.n	80014c6 <HAL_GPIO_Init+0x23e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a57      	ldr	r2, [pc, #348]	@ (80015b8 <HAL_GPIO_Init+0x330>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d031      	beq.n	80014c2 <HAL_GPIO_Init+0x23a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a56      	ldr	r2, [pc, #344]	@ (80015bc <HAL_GPIO_Init+0x334>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d02b      	beq.n	80014be <HAL_GPIO_Init+0x236>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a55      	ldr	r2, [pc, #340]	@ (80015c0 <HAL_GPIO_Init+0x338>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d025      	beq.n	80014ba <HAL_GPIO_Init+0x232>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a54      	ldr	r2, [pc, #336]	@ (80015c4 <HAL_GPIO_Init+0x33c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d01f      	beq.n	80014b6 <HAL_GPIO_Init+0x22e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a53      	ldr	r2, [pc, #332]	@ (80015c8 <HAL_GPIO_Init+0x340>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d019      	beq.n	80014b2 <HAL_GPIO_Init+0x22a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a52      	ldr	r2, [pc, #328]	@ (80015cc <HAL_GPIO_Init+0x344>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0x226>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a51      	ldr	r2, [pc, #324]	@ (80015d0 <HAL_GPIO_Init+0x348>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00d      	beq.n	80014aa <HAL_GPIO_Init+0x222>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a50      	ldr	r2, [pc, #320]	@ (80015d4 <HAL_GPIO_Init+0x34c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d007      	beq.n	80014a6 <HAL_GPIO_Init+0x21e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4f      	ldr	r2, [pc, #316]	@ (80015d8 <HAL_GPIO_Init+0x350>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_GPIO_Init+0x21a>
 800149e:	2309      	movs	r3, #9
 80014a0:	e012      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014a2:	230a      	movs	r3, #10
 80014a4:	e010      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014a6:	2308      	movs	r3, #8
 80014a8:	e00e      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014aa:	2307      	movs	r3, #7
 80014ac:	e00c      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014ae:	2306      	movs	r3, #6
 80014b0:	e00a      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014b2:	2305      	movs	r3, #5
 80014b4:	e008      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014b6:	2304      	movs	r3, #4
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e004      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014be:	2302      	movs	r3, #2
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014c6:	2300      	movs	r3, #0
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	f002 0203 	and.w	r2, r2, #3
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4093      	lsls	r3, r2
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014d8:	4935      	ldr	r1, [pc, #212]	@ (80015b0 <HAL_GPIO_Init+0x328>)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4b3d      	ldr	r3, [pc, #244]	@ (80015dc <HAL_GPIO_Init+0x354>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150a:	4a34      	ldr	r2, [pc, #208]	@ (80015dc <HAL_GPIO_Init+0x354>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001510:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <HAL_GPIO_Init+0x354>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001534:	4a29      	ldr	r2, [pc, #164]	@ (80015dc <HAL_GPIO_Init+0x354>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800153a:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <HAL_GPIO_Init+0x354>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155e:	4a1f      	ldr	r2, [pc, #124]	@ (80015dc <HAL_GPIO_Init+0x354>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <HAL_GPIO_Init+0x354>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001588:	4a14      	ldr	r2, [pc, #80]	@ (80015dc <HAL_GPIO_Init+0x354>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3301      	adds	r3, #1
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	f67f ae86 	bls.w	80012a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3724      	adds	r7, #36	@ 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40013800 	.word	0x40013800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40021400 	.word	0x40021400
 80015cc:	40021800 	.word	0x40021800
 80015d0:	40021c00 	.word	0x40021c00
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40022400 	.word	0x40022400
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	041a      	lsls	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40007000 	.word	0x40007000

08001634 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <HAL_PWREx_EnableOverDrive+0x98>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a22      	ldr	r2, [pc, #136]	@ (80016cc <HAL_PWREx_EnableOverDrive+0x98>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <HAL_PWREx_EnableOverDrive+0x98>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001656:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a1d      	ldr	r2, [pc, #116]	@ (80016d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001660:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001662:	f7ff fc61 	bl	8000f28 <HAL_GetTick>
 8001666:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001668:	e009      	b.n	800167e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800166a:	f7ff fc5d 	bl	8000f28 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001678:	d901      	bls.n	800167e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e022      	b.n	80016c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800168a:	d1ee      	bne.n	800166a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800168c:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0f      	ldr	r2, [pc, #60]	@ (80016d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001696:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001698:	f7ff fc46 	bl	8000f28 <HAL_GetTick>
 800169c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800169e:	e009      	b.n	80016b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016a0:	f7ff fc42 	bl	8000f28 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016ae:	d901      	bls.n	80016b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e007      	b.n	80016c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80016c0:	d1ee      	bne.n	80016a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40007000 	.word	0x40007000

080016d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e29b      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8087 	beq.w	8001806 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f8:	4b96      	ldr	r3, [pc, #600]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b04      	cmp	r3, #4
 8001702:	d00c      	beq.n	800171e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001704:	4b93      	ldr	r3, [pc, #588]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b08      	cmp	r3, #8
 800170e:	d112      	bne.n	8001736 <HAL_RCC_OscConfig+0x62>
 8001710:	4b90      	ldr	r3, [pc, #576]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001718:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800171c:	d10b      	bne.n	8001736 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171e:	4b8d      	ldr	r3, [pc, #564]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d06c      	beq.n	8001804 <HAL_RCC_OscConfig+0x130>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d168      	bne.n	8001804 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e275      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x7a>
 8001740:	4b84      	ldr	r3, [pc, #528]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a83      	ldr	r2, [pc, #524]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e02e      	b.n	80017ac <HAL_RCC_OscConfig+0xd8>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x9c>
 8001756:	4b7f      	ldr	r3, [pc, #508]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a7e      	ldr	r2, [pc, #504]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 800175c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b7c      	ldr	r3, [pc, #496]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a7b      	ldr	r2, [pc, #492]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001768:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e01d      	b.n	80017ac <HAL_RCC_OscConfig+0xd8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0xc0>
 800177a:	4b76      	ldr	r3, [pc, #472]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a75      	ldr	r2, [pc, #468]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b73      	ldr	r3, [pc, #460]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a72      	ldr	r2, [pc, #456]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0xd8>
 8001794:	4b6f      	ldr	r3, [pc, #444]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a6e      	ldr	r2, [pc, #440]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 800179a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a6b      	ldr	r2, [pc, #428]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 80017a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff fbb8 	bl	8000f28 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fbb4 	bl	8000f28 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	@ 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e229      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b61      	ldr	r3, [pc, #388]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0xe8>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff fba4 	bl	8000f28 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fba0 	bl	8000f28 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	@ 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e215      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	4b57      	ldr	r3, [pc, #348]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x110>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d069      	beq.n	80018e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001812:	4b50      	ldr	r3, [pc, #320]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800181e:	4b4d      	ldr	r3, [pc, #308]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b08      	cmp	r3, #8
 8001828:	d11c      	bne.n	8001864 <HAL_RCC_OscConfig+0x190>
 800182a:	4b4a      	ldr	r3, [pc, #296]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d116      	bne.n	8001864 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_RCC_OscConfig+0x17a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e1e9      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b41      	ldr	r3, [pc, #260]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	493d      	ldr	r1, [pc, #244]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	e040      	b.n	80018e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d023      	beq.n	80018b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186c:	4b39      	ldr	r3, [pc, #228]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a38      	ldr	r2, [pc, #224]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fb56 	bl	8000f28 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001880:	f7ff fb52 	bl	8000f28 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1c7      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001892:	4b30      	ldr	r3, [pc, #192]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189e:	4b2d      	ldr	r3, [pc, #180]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4929      	ldr	r1, [pc, #164]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
 80018b2:	e018      	b.n	80018e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b4:	4b27      	ldr	r3, [pc, #156]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a26      	ldr	r2, [pc, #152]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fb32 	bl	8000f28 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c8:	f7ff fb2e 	bl	8000f28 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e1a3      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d038      	beq.n	8001964 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d019      	beq.n	800192e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fa:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 80018fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018fe:	4a15      	ldr	r2, [pc, #84]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff fb0f 	bl	8000f28 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190e:	f7ff fb0b 	bl	8000f28 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e180      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x23a>
 800192c:	e01a      	b.n	8001964 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001932:	4a08      	ldr	r2, [pc, #32]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193a:	f7ff faf5 	bl	8000f28 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001942:	f7ff faf1 	bl	8000f28 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d903      	bls.n	8001958 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e166      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
 8001954:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4b92      	ldr	r3, [pc, #584]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 800195a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ee      	bne.n	8001942 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a4 	beq.w	8001aba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001972:	4b8c      	ldr	r3, [pc, #560]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10d      	bne.n	800199a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b89      	ldr	r3, [pc, #548]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	4a88      	ldr	r2, [pc, #544]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	@ 0x40
 800198a:	4b86      	ldr	r3, [pc, #536]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199a:	4b83      	ldr	r3, [pc, #524]	@ (8001ba8 <HAL_RCC_OscConfig+0x4d4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d118      	bne.n	80019d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019a6:	4b80      	ldr	r3, [pc, #512]	@ (8001ba8 <HAL_RCC_OscConfig+0x4d4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7f      	ldr	r2, [pc, #508]	@ (8001ba8 <HAL_RCC_OscConfig+0x4d4>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fab9 	bl	8000f28 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff fab5 	bl	8000f28 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b64      	cmp	r3, #100	@ 0x64
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e12a      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019cc:	4b76      	ldr	r3, [pc, #472]	@ (8001ba8 <HAL_RCC_OscConfig+0x4d4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x31a>
 80019e0:	4b70      	ldr	r3, [pc, #448]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e4:	4a6f      	ldr	r2, [pc, #444]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ec:	e02d      	b.n	8001a4a <HAL_RCC_OscConfig+0x376>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x33c>
 80019f6:	4b6b      	ldr	r3, [pc, #428]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fa:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a02:	4b68      	ldr	r3, [pc, #416]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a06:	4a67      	ldr	r2, [pc, #412]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0e:	e01c      	b.n	8001a4a <HAL_RCC_OscConfig+0x376>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d10c      	bne.n	8001a32 <HAL_RCC_OscConfig+0x35e>
 8001a18:	4b62      	ldr	r3, [pc, #392]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1c:	4a61      	ldr	r2, [pc, #388]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a24:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a28:	4a5e      	ldr	r2, [pc, #376]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a30:	e00b      	b.n	8001a4a <HAL_RCC_OscConfig+0x376>
 8001a32:	4b5c      	ldr	r3, [pc, #368]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a36:	4a5b      	ldr	r2, [pc, #364]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a3e:	4b59      	ldr	r3, [pc, #356]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a42:	4a58      	ldr	r2, [pc, #352]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d015      	beq.n	8001a7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7ff fa69 	bl	8000f28 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7ff fa65 	bl	8000f28 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0d8      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0ee      	beq.n	8001a5a <HAL_RCC_OscConfig+0x386>
 8001a7c:	e014      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fa53 	bl	8000f28 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff fa4f 	bl	8000f28 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e0c2      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1ee      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d105      	bne.n	8001aba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001ab4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80ae 	beq.w	8001c20 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac4:	4b37      	ldr	r3, [pc, #220]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d06d      	beq.n	8001bac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d14b      	bne.n	8001b70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad8:	4b32      	ldr	r3, [pc, #200]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a31      	ldr	r2, [pc, #196]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fa20 	bl	8000f28 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff fa1c 	bl	8000f28 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e091      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	019b      	lsls	r3, r3, #6
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	3b01      	subs	r3, #1
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	071b      	lsls	r3, r3, #28
 8001b36:	491b      	ldr	r1, [pc, #108]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a18      	ldr	r2, [pc, #96]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f9ee 	bl	8000f28 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff f9ea 	bl	8000f28 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e05f      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x47c>
 8001b6e:	e057      	b.n	8001c20 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001b76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f9d4 	bl	8000f28 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff f9d0 	bl	8000f28 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e045      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	4b03      	ldr	r3, [pc, #12]	@ (8001ba4 <HAL_RCC_OscConfig+0x4d0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4b0>
 8001ba2:	e03d      	b.n	8001c20 <HAL_RCC_OscConfig+0x54c>
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <HAL_RCC_OscConfig+0x558>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d030      	beq.n	8001c1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d129      	bne.n	8001c1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d122      	bne.n	8001c1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bdc:	4013      	ands	r3, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001be2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d119      	bne.n	8001c1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d10f      	bne.n	8001c1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0d0      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c48:	4b6a      	ldr	r3, [pc, #424]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d910      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b67      	ldr	r3, [pc, #412]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 020f 	bic.w	r2, r3, #15
 8001c5e:	4965      	ldr	r1, [pc, #404]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b63      	ldr	r3, [pc, #396]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0b8      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c90:	4b59      	ldr	r3, [pc, #356]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a58      	ldr	r2, [pc, #352]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca8:	4b53      	ldr	r3, [pc, #332]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a52      	ldr	r2, [pc, #328]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b50      	ldr	r3, [pc, #320]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	494d      	ldr	r1, [pc, #308]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d040      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b47      	ldr	r3, [pc, #284]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d115      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	4b41      	ldr	r3, [pc, #260]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e073      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d02:	4b3d      	ldr	r3, [pc, #244]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e06b      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d12:	4b39      	ldr	r3, [pc, #228]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f023 0203 	bic.w	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4936      	ldr	r1, [pc, #216]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d24:	f7ff f900 	bl	8000f28 <HAL_GetTick>
 8001d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7ff f8fc 	bl	8000f28 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e053      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	4b2d      	ldr	r3, [pc, #180]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 020c 	and.w	r2, r3, #12
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d1eb      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d54:	4b27      	ldr	r3, [pc, #156]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d210      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b24      	ldr	r3, [pc, #144]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 020f 	bic.w	r2, r3, #15
 8001d6a:	4922      	ldr	r1, [pc, #136]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e032      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4916      	ldr	r1, [pc, #88]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dae:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	490e      	ldr	r1, [pc, #56]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dc2:	f000 f821 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	490a      	ldr	r1, [pc, #40]	@ (8001dfc <HAL_RCC_ClockConfig+0x1cc>)
 8001dd4:	5ccb      	ldrb	r3, [r1, r3]
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	4a09      	ldr	r2, [pc, #36]	@ (8001e00 <HAL_RCC_ClockConfig+0x1d0>)
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_RCC_ClockConfig+0x1d4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f85c 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	08005214 	.word	0x08005214
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e0c:	b094      	sub	sp, #80	@ 0x50
 8001e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e14:	2300      	movs	r3, #0
 8001e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e18:	2300      	movs	r3, #0
 8001e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e20:	4b79      	ldr	r3, [pc, #484]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d00d      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x40>
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	f200 80e1 	bhi.w	8001ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x34>
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e3a:	e0db      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4b73      	ldr	r3, [pc, #460]	@ (800200c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e40:	e0db      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e42:	4b73      	ldr	r3, [pc, #460]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e46:	e0d8      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e48:	4b6f      	ldr	r3, [pc, #444]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e50:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e52:	4b6d      	ldr	r3, [pc, #436]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d063      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	2200      	movs	r2, #0
 8001e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e72:	2300      	movs	r3, #0
 8001e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e7a:	4622      	mov	r2, r4
 8001e7c:	462b      	mov	r3, r5
 8001e7e:	f04f 0000 	mov.w	r0, #0
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	0159      	lsls	r1, r3, #5
 8001e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e8c:	0150      	lsls	r0, r2, #5
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4621      	mov	r1, r4
 8001e94:	1a51      	subs	r1, r2, r1
 8001e96:	6139      	str	r1, [r7, #16]
 8001e98:	4629      	mov	r1, r5
 8001e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001eac:	4659      	mov	r1, fp
 8001eae:	018b      	lsls	r3, r1, #6
 8001eb0:	4651      	mov	r1, sl
 8001eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eb6:	4651      	mov	r1, sl
 8001eb8:	018a      	lsls	r2, r1, #6
 8001eba:	4651      	mov	r1, sl
 8001ebc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ec0:	4659      	mov	r1, fp
 8001ec2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eda:	4690      	mov	r8, r2
 8001edc:	4699      	mov	r9, r3
 8001ede:	4623      	mov	r3, r4
 8001ee0:	eb18 0303 	adds.w	r3, r8, r3
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	462b      	mov	r3, r5
 8001ee8:	eb49 0303 	adc.w	r3, r9, r3
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001efa:	4629      	mov	r1, r5
 8001efc:	024b      	lsls	r3, r1, #9
 8001efe:	4621      	mov	r1, r4
 8001f00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f04:	4621      	mov	r1, r4
 8001f06:	024a      	lsls	r2, r1, #9
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f0e:	2200      	movs	r2, #0
 8001f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f18:	f7fe f9ea 	bl	80002f0 <__aeabi_uldivmod>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4613      	mov	r3, r2
 8001f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f24:	e058      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f26:	4b38      	ldr	r3, [pc, #224]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	4611      	mov	r1, r2
 8001f32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f40:	4642      	mov	r2, r8
 8001f42:	464b      	mov	r3, r9
 8001f44:	f04f 0000 	mov.w	r0, #0
 8001f48:	f04f 0100 	mov.w	r1, #0
 8001f4c:	0159      	lsls	r1, r3, #5
 8001f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f52:	0150      	lsls	r0, r2, #5
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4641      	mov	r1, r8
 8001f5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f5e:	4649      	mov	r1, r9
 8001f60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f78:	ebb2 040a 	subs.w	r4, r2, sl
 8001f7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	00eb      	lsls	r3, r5, #3
 8001f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f8e:	00e2      	lsls	r2, r4, #3
 8001f90:	4614      	mov	r4, r2
 8001f92:	461d      	mov	r5, r3
 8001f94:	4643      	mov	r3, r8
 8001f96:	18e3      	adds	r3, r4, r3
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	464b      	mov	r3, r9
 8001f9c:	eb45 0303 	adc.w	r3, r5, r3
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fae:	4629      	mov	r1, r5
 8001fb0:	028b      	lsls	r3, r1, #10
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb8:	4621      	mov	r1, r4
 8001fba:	028a      	lsls	r2, r1, #10
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	61fa      	str	r2, [r7, #28]
 8001fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fcc:	f7fe f990 	bl	80002f0 <__aeabi_uldivmod>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fe8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ff2:	e002      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_RCC_GetSysClockFreq+0x204>)
 8001ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3750      	adds	r7, #80	@ 0x50
 8002000:	46bd      	mov	sp, r7
 8002002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	00f42400 	.word	0x00f42400
 8002010:	007a1200 	.word	0x007a1200

08002014 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002018:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <HAL_RCC_GetHCLKFreq+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000000 	.word	0x20000000

0800202c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002030:	f7ff fff0 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0a9b      	lsrs	r3, r3, #10
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	@ (8002050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	08005224 	.word	0x08005224

08002054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002058:	f7ff ffdc 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	0b5b      	lsrs	r3, r3, #13
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	4903      	ldr	r1, [pc, #12]	@ (8002078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800
 8002078:	08005224 	.word	0x08005224

0800207c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d012      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020a4:	4b69      	ldr	r3, [pc, #420]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a68      	ldr	r2, [pc, #416]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80020ae:	6093      	str	r3, [r2, #8]
 80020b0:	4b66      	ldr	r3, [pc, #408]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b8:	4964      	ldr	r1, [pc, #400]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d017      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020d6:	4b5d      	ldr	r3, [pc, #372]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e4:	4959      	ldr	r1, [pc, #356]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020f4:	d101      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002102:	2301      	movs	r3, #1
 8002104:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d017      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002112:	4b4e      	ldr	r3, [pc, #312]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002118:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	494a      	ldr	r1, [pc, #296]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002130:	d101      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800213e:	2301      	movs	r3, #1
 8002140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800214e:	2301      	movs	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 808b 	beq.w	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002160:	4b3a      	ldr	r3, [pc, #232]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	4a39      	ldr	r2, [pc, #228]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800216a:	6413      	str	r3, [r2, #64]	@ 0x40
 800216c:	4b37      	ldr	r3, [pc, #220]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002178:	4b35      	ldr	r3, [pc, #212]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a34      	ldr	r2, [pc, #208]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002184:	f7fe fed0 	bl	8000f28 <HAL_GetTick>
 8002188:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7fe fecc 	bl	8000f28 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	@ 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e38f      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800219e:	4b2c      	ldr	r3, [pc, #176]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021aa:	4b28      	ldr	r3, [pc, #160]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d035      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d02e      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021c8:	4b20      	ldr	r3, [pc, #128]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021d2:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d6:	4a1d      	ldr	r2, [pc, #116]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021dc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021de:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e2:	4a1a      	ldr	r2, [pc, #104]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021ea:	4a18      	ldr	r2, [pc, #96]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021f0:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d114      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe fe94 	bl	8000f28 <HAL_GetTick>
 8002200:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	e00a      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7fe fe90 	bl	8000f28 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e351      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221a:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0ee      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800222e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002232:	d111      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002242:	400b      	ands	r3, r1
 8002244:	4901      	ldr	r1, [pc, #4]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
 800224a:	e00b      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800224c:	40023800 	.word	0x40023800
 8002250:	40007000 	.word	0x40007000
 8002254:	0ffffcff 	.word	0x0ffffcff
 8002258:	4bac      	ldr	r3, [pc, #688]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4aab      	ldr	r2, [pc, #684]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002262:	6093      	str	r3, [r2, #8]
 8002264:	4ba9      	ldr	r3, [pc, #676]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002266:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002270:	49a6      	ldr	r1, [pc, #664]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002272:	4313      	orrs	r3, r2
 8002274:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	d010      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002282:	4ba2      	ldr	r3, [pc, #648]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002288:	4aa0      	ldr	r2, [pc, #640]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800228e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002292:	4b9e      	ldr	r3, [pc, #632]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002294:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229c:	499b      	ldr	r1, [pc, #620]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b0:	4b96      	ldr	r3, [pc, #600]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022be:	4993      	ldr	r1, [pc, #588]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022d2:	4b8e      	ldr	r3, [pc, #568]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022e0:	498a      	ldr	r1, [pc, #552]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022f4:	4b85      	ldr	r3, [pc, #532]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002302:	4982      	ldr	r1, [pc, #520]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002316:	4b7d      	ldr	r3, [pc, #500]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	4979      	ldr	r1, [pc, #484]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002338:	4b74      	ldr	r3, [pc, #464]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	4971      	ldr	r1, [pc, #452]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800235a:	4b6c      	ldr	r3, [pc, #432]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002360:	f023 020c 	bic.w	r2, r3, #12
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002368:	4968      	ldr	r1, [pc, #416]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800237c:	4b63      	ldr	r3, [pc, #396]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002382:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	4960      	ldr	r1, [pc, #384]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800239e:	4b5b      	ldr	r3, [pc, #364]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ac:	4957      	ldr	r1, [pc, #348]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023c0:	4b52      	ldr	r3, [pc, #328]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ce:	494f      	ldr	r1, [pc, #316]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023e2:	4b4a      	ldr	r3, [pc, #296]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	4946      	ldr	r1, [pc, #280]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002404:	4b41      	ldr	r3, [pc, #260]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002412:	493e      	ldr	r1, [pc, #248]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002426:	4b39      	ldr	r3, [pc, #228]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002434:	4935      	ldr	r1, [pc, #212]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002448:	4b30      	ldr	r3, [pc, #192]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002456:	492d      	ldr	r1, [pc, #180]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d011      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800246a:	4b28      	ldr	r3, [pc, #160]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002470:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002478:	4924      	ldr	r1, [pc, #144]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002484:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002488:	d101      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800248a:	2301      	movs	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024aa:	4b18      	ldr	r3, [pc, #96]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b8:	4914      	ldr	r1, [pc, #80]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00b      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024cc:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024dc:	490b      	ldr	r1, [pc, #44]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00f      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002500:	4902      	ldr	r1, [pc, #8]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002508:	e002      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800251c:	4b8a      	ldr	r3, [pc, #552]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800251e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002522:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252c:	4986      	ldr	r1, [pc, #536]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00b      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002540:	4b81      	ldr	r3, [pc, #516]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002542:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002546:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002550:	497d      	ldr	r1, [pc, #500]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d006      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80d6 	beq.w	8002718 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800256c:	4b76      	ldr	r3, [pc, #472]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a75      	ldr	r2, [pc, #468]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002572:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002578:	f7fe fcd6 	bl	8000f28 <HAL_GetTick>
 800257c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002580:	f7fe fcd2 	bl	8000f28 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	@ 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e195      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002592:	4b6d      	ldr	r3, [pc, #436]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d021      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d11d      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025b2:	4b65      	ldr	r3, [pc, #404]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025c0:	4b61      	ldr	r3, [pc, #388]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025c6:	0e1b      	lsrs	r3, r3, #24
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	019a      	lsls	r2, r3, #6
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	431a      	orrs	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	071b      	lsls	r3, r3, #28
 80025e6:	4958      	ldr	r1, [pc, #352]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800260c:	2b00      	cmp	r3, #0
 800260e:	d02e      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002618:	d129      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800261a:	4b4b      	ldr	r3, [pc, #300]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800261c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002628:	4b47      	ldr	r3, [pc, #284]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800262e:	0f1b      	lsrs	r3, r3, #28
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	019a      	lsls	r2, r3, #6
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	041b      	lsls	r3, r3, #16
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	061b      	lsls	r3, r3, #24
 8002648:	431a      	orrs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	071b      	lsls	r3, r3, #28
 800264e:	493e      	ldr	r1, [pc, #248]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002656:	4b3c      	ldr	r3, [pc, #240]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800265c:	f023 021f 	bic.w	r2, r3, #31
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	3b01      	subs	r3, #1
 8002666:	4938      	ldr	r1, [pc, #224]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d01d      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800267a:	4b33      	ldr	r3, [pc, #204]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800267c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002680:	0e1b      	lsrs	r3, r3, #24
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002688:	4b2f      	ldr	r3, [pc, #188]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800268a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800268e:	0f1b      	lsrs	r3, r3, #28
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	019a      	lsls	r2, r3, #6
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	431a      	orrs	r2, r3
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	061b      	lsls	r3, r3, #24
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	071b      	lsls	r3, r3, #28
 80026ae:	4926      	ldr	r1, [pc, #152]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d011      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	019a      	lsls	r2, r3, #6
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	071b      	lsls	r3, r3, #28
 80026de:	491a      	ldr	r1, [pc, #104]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026e6:	4b18      	ldr	r3, [pc, #96]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f2:	f7fe fc19 	bl	8000f28 <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026fa:	f7fe fc15 	bl	8000f28 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b64      	cmp	r3, #100	@ 0x64
 8002706:	d901      	bls.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e0d8      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800270c:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b01      	cmp	r3, #1
 800271c:	f040 80ce 	bne.w	80028bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002720:	4b09      	ldr	r3, [pc, #36]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a08      	ldr	r2, [pc, #32]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800272a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800272c:	f7fe fbfc 	bl	8000f28 <HAL_GetTick>
 8002730:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002732:	e00b      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002734:	f7fe fbf8 	bl	8000f28 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	@ 0x64
 8002740:	d904      	bls.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e0bb      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800274c:	4b5e      	ldr	r3, [pc, #376]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002758:	d0ec      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002776:	2b00      	cmp	r3, #0
 8002778:	d02e      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d12a      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002782:	4b51      	ldr	r3, [pc, #324]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002790:	4b4d      	ldr	r3, [pc, #308]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002796:	0f1b      	lsrs	r3, r3, #28
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	019a      	lsls	r2, r3, #6
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	061b      	lsls	r3, r3, #24
 80027b0:	431a      	orrs	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	071b      	lsls	r3, r3, #28
 80027b6:	4944      	ldr	r1, [pc, #272]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027be:	4b42      	ldr	r3, [pc, #264]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027c4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	3b01      	subs	r3, #1
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	493d      	ldr	r1, [pc, #244]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d022      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027ec:	d11d      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027ee:	4b36      	ldr	r3, [pc, #216]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f4:	0e1b      	lsrs	r3, r3, #24
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027fc:	4b32      	ldr	r3, [pc, #200]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002802:	0f1b      	lsrs	r3, r3, #28
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	019a      	lsls	r2, r3, #6
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	431a      	orrs	r2, r3
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	431a      	orrs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	071b      	lsls	r3, r3, #28
 8002822:	4929      	ldr	r1, [pc, #164]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d028      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002836:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	0e1b      	lsrs	r3, r3, #24
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002844:	4b20      	ldr	r3, [pc, #128]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	019a      	lsls	r2, r3, #6
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	431a      	orrs	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	071b      	lsls	r3, r3, #28
 800286a:	4917      	ldr	r1, [pc, #92]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002878:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	4911      	ldr	r1, [pc, #68]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002888:	4b0f      	ldr	r3, [pc, #60]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0e      	ldr	r2, [pc, #56]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800288e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002894:	f7fe fb48 	bl	8000f28 <HAL_GetTick>
 8002898:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800289c:	f7fe fb44 	bl	8000f28 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	@ 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e007      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028ba:	d1ef      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800

080028cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e09d      	b.n	8002a1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d108      	bne.n	80028f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028ee:	d009      	beq.n	8002904 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
 80028f6:	e005      	b.n	8002904 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe f92a 	bl	8000b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800293a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002944:	d902      	bls.n	800294c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	e002      	b.n	8002952 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800294c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002950:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800295a:	d007      	beq.n	800296c <HAL_SPI_Init+0xa0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002964:	d002      	beq.n	800296c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ae:	ea42 0103 	orr.w	r1, r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	f003 0204 	and.w	r2, r3, #4
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80029e8:	ea42 0103 	orr.w	r1, r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b088      	sub	sp, #32
 8002a26:	af02      	add	r7, sp, #8
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d002      	beq.n	8002a48 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002a42:	2302      	movs	r3, #2
 8002a44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a46:	e11a      	b.n	8002c7e <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a50:	d112      	bne.n	8002a78 <HAL_SPI_Receive+0x56>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10e      	bne.n	8002a78 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a62:	88fa      	ldrh	r2, [r7, #6]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f90e 	bl	8002c90 <HAL_SPI_TransmitReceive>
 8002a74:	4603      	mov	r3, r0
 8002a76:	e107      	b.n	8002c88 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_SPI_Receive+0x64>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e100      	b.n	8002c88 <HAL_SPI_Receive+0x266>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a8e:	f7fe fa4b 	bl	8000f28 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_SPI_Receive+0x7e>
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002aa4:	e0eb      	b.n	8002c7e <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002af0:	d908      	bls.n	8002b04 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	e007      	b.n	8002b14 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b12:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b1c:	d10f      	bne.n	8002b3e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b48:	2b40      	cmp	r3, #64	@ 0x40
 8002b4a:	d007      	beq.n	8002b5c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b64:	d86f      	bhi.n	8002c46 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b66:	e034      	b.n	8002bd2 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d117      	bne.n	8002ba6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f103 020c 	add.w	r2, r3, #12
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	7812      	ldrb	r2, [r2, #0]
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002ba4:	e015      	b.n	8002bd2 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ba6:	f7fe f9bf 	bl	8000f28 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d803      	bhi.n	8002bbe <HAL_SPI_Receive+0x19c>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d102      	bne.n	8002bc4 <HAL_SPI_Receive+0x1a2>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d106      	bne.n	8002bd2 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002bd0:	e055      	b.n	8002c7e <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1c4      	bne.n	8002b68 <HAL_SPI_Receive+0x146>
 8002bde:	e038      	b.n	8002c52 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d115      	bne.n	8002c1a <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	b292      	uxth	r2, r2
 8002bfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	1c9a      	adds	r2, r3, #2
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002c18:	e015      	b.n	8002c46 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c1a:	f7fe f985 	bl	8000f28 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d803      	bhi.n	8002c32 <HAL_SPI_Receive+0x210>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d102      	bne.n	8002c38 <HAL_SPI_Receive+0x216>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002c44:	e01b      	b.n	8002c7e <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1c6      	bne.n	8002be0 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	6839      	ldr	r1, [r7, #0]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fc6e 	bl	8003538 <SPI_EndRxTransaction>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
 8002c74:	e003      	b.n	8002c7e <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	@ 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x26>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e20a      	b.n	80030cc <HAL_SPI_TransmitReceive+0x43c>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cbe:	f7fe f933 	bl	8000f28 <HAL_GetTick>
 8002cc2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002cca:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cda:	7efb      	ldrb	r3, [r7, #27]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d00e      	beq.n	8002cfe <HAL_SPI_TransmitReceive+0x6e>
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ce6:	d106      	bne.n	8002cf6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <HAL_SPI_TransmitReceive+0x66>
 8002cf0:	7efb      	ldrb	r3, [r7, #27]
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d003      	beq.n	8002cfe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002cfc:	e1e0      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_SPI_TransmitReceive+0x80>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_SPI_TransmitReceive+0x80>
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d103      	bne.n	8002d18 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002d16:	e1d3      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d003      	beq.n	8002d2c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2205      	movs	r2, #5
 8002d28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	887a      	ldrh	r2, [r7, #2]
 8002d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	887a      	ldrh	r2, [r7, #2]
 8002d44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	887a      	ldrh	r2, [r7, #2]
 8002d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	887a      	ldrh	r2, [r7, #2]
 8002d58:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d6e:	d802      	bhi.n	8002d76 <HAL_SPI_TransmitReceive+0xe6>
 8002d70:	8a3b      	ldrh	r3, [r7, #16]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d908      	bls.n	8002d88 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	e007      	b.n	8002d98 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d96:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da2:	2b40      	cmp	r3, #64	@ 0x40
 8002da4:	d007      	beq.n	8002db6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dbe:	f240 8081 	bls.w	8002ec4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_SPI_TransmitReceive+0x140>
 8002dca:	8a7b      	ldrh	r3, [r7, #18]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d16d      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd4:	881a      	ldrh	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de0:	1c9a      	adds	r2, r3, #2
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002df4:	e05a      	b.n	8002eac <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d11b      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x1ac>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d016      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0x1ac>
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d113      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e18:	881a      	ldrh	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e24:	1c9a      	adds	r2, r3, #2
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d11c      	bne.n	8002e84 <HAL_SPI_TransmitReceive+0x1f4>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d016      	beq.n	8002e84 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	b292      	uxth	r2, r2
 8002e62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	1c9a      	adds	r2, r3, #2
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e80:	2301      	movs	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e84:	f7fe f850 	bl	8000f28 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d80b      	bhi.n	8002eac <HAL_SPI_TransmitReceive+0x21c>
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9a:	d007      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002eaa:	e109      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d19f      	bne.n	8002df6 <HAL_SPI_TransmitReceive+0x166>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d199      	bne.n	8002df6 <HAL_SPI_TransmitReceive+0x166>
 8002ec2:	e0e3      	b.n	800308c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x244>
 8002ecc:	8a7b      	ldrh	r3, [r7, #18]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	f040 80cf 	bne.w	8003072 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d912      	bls.n	8002f04 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee2:	881a      	ldrh	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eee:	1c9a      	adds	r2, r3, #2
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b02      	subs	r3, #2
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f02:	e0b6      	b.n	8003072 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f2a:	e0a2      	b.n	8003072 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d134      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x314>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02f      	beq.n	8002fa4 <HAL_SPI_TransmitReceive+0x314>
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d12c      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d912      	bls.n	8002f7a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f64:	1c9a      	adds	r2, r3, #2
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b02      	subs	r3, #2
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f78:	e012      	b.n	8002fa0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	7812      	ldrb	r2, [r2, #0]
 8002f86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d148      	bne.n	8003044 <HAL_SPI_TransmitReceive+0x3b4>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d042      	beq.n	8003044 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d923      	bls.n	8003012 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	b292      	uxth	r2, r2
 8002fd6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	1c9a      	adds	r2, r3, #2
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b02      	subs	r3, #2
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d81f      	bhi.n	8003040 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	e016      	b.n	8003040 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f103 020c 	add.w	r2, r3, #12
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003040:	2301      	movs	r3, #1
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003044:	f7fd ff70 	bl	8000f28 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003050:	429a      	cmp	r2, r3
 8003052:	d803      	bhi.n	800305c <HAL_SPI_TransmitReceive+0x3cc>
 8003054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d102      	bne.n	8003062 <HAL_SPI_TransmitReceive+0x3d2>
 800305c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305e:	2b00      	cmp	r3, #0
 8003060:	d107      	bne.n	8003072 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003070:	e026      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	f47f af57 	bne.w	8002f2c <HAL_SPI_TransmitReceive+0x29c>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	f47f af50 	bne.w	8002f2c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 facd 	bl	8003630 <SPI_EndRxTxTransaction>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b6:	e003      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80030c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3728      	adds	r7, #40	@ 0x28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10e      	bne.n	8003114 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
    return;
 8003112:	e0ce      	b.n	80032b2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_SPI_IRQHandler+0x5e>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	4798      	blx	r3
    return;
 8003130:	e0bf      	b.n	80032b2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <HAL_SPI_IRQHandler+0x7e>
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d105      	bne.n	8003152 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80b0 	beq.w	80032b2 <HAL_SPI_IRQHandler+0x1de>
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80aa 	beq.w	80032b2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d023      	beq.n	80031b0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b03      	cmp	r3, #3
 8003172:	d011      	beq.n	8003198 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003178:	f043 0204 	orr.w	r2, r3, #4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	e00b      	b.n	80031b0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]
        return;
 80031ae:	e080      	b.n	80032b2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d014      	beq.n	80031e4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031be:	f043 0201 	orr.w	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00c      	beq.n	8003208 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f2:	f043 0208 	orr.w	r2, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320c:	2b00      	cmp	r3, #0
 800320e:	d04f      	beq.n	80032b0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800321e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d104      	bne.n	800323c <HAL_SPI_IRQHandler+0x168>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d034      	beq.n	80032a6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0203 	bic.w	r2, r2, #3
 800324a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003250:	2b00      	cmp	r3, #0
 8003252:	d011      	beq.n	8003278 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003258:	4a17      	ldr	r2, [pc, #92]	@ (80032b8 <HAL_SPI_IRQHandler+0x1e4>)
 800325a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd ffee 	bl	8001242 <HAL_DMA_Abort_IT>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003270:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327c:	2b00      	cmp	r3, #0
 800327e:	d016      	beq.n	80032ae <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003284:	4a0c      	ldr	r2, [pc, #48]	@ (80032b8 <HAL_SPI_IRQHandler+0x1e4>)
 8003286:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd ffd8 	bl	8001242 <HAL_DMA_Abort_IT>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80032a4:	e003      	b.n	80032ae <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f808 	bl	80032bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80032ac:	e000      	b.n	80032b0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80032ae:	bf00      	nop
    return;
 80032b0:	bf00      	nop
  }
}
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	080032d1 	.word	0x080032d1

080032bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff ffe5 	bl	80032bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800330c:	f7fd fe0c 	bl	8000f28 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4413      	add	r3, r2
 800331a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800331c:	f7fd fe04 	bl	8000f28 <HAL_GetTick>
 8003320:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003322:	4b39      	ldr	r3, [pc, #228]	@ (8003408 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	015b      	lsls	r3, r3, #5
 8003328:	0d1b      	lsrs	r3, r3, #20
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003332:	e054      	b.n	80033de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333a:	d050      	beq.n	80033de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800333c:	f7fd fdf4 	bl	8000f28 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	429a      	cmp	r2, r3
 800334a:	d902      	bls.n	8003352 <SPI_WaitFlagStateUntilTimeout+0x56>
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d13d      	bne.n	80033ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003360:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800336a:	d111      	bne.n	8003390 <SPI_WaitFlagStateUntilTimeout+0x94>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003374:	d004      	beq.n	8003380 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337e:	d107      	bne.n	8003390 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800338e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003398:	d10f      	bne.n	80033ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e017      	b.n	80033fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3b01      	subs	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	bf0c      	ite	eq
 80033ee:	2301      	moveq	r3, #1
 80033f0:	2300      	movne	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d19b      	bne.n	8003334 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000000 	.word	0x20000000

0800340c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	@ 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800341e:	f7fd fd83 	bl	8000f28 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	4413      	add	r3, r2
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800342e:	f7fd fd7b 	bl	8000f28 <HAL_GetTick>
 8003432:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800343c:	4b3d      	ldr	r3, [pc, #244]	@ (8003534 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00da      	lsls	r2, r3, #3
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	0d1b      	lsrs	r3, r3, #20
 800344c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003454:	e060      	b.n	8003518 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800345c:	d107      	bne.n	800346e <SPI_WaitFifoStateUntilTimeout+0x62>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800346c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d050      	beq.n	8003518 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003476:	f7fd fd57 	bl	8000f28 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003482:	429a      	cmp	r2, r3
 8003484:	d902      	bls.n	800348c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	d13d      	bne.n	8003508 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800349a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034a4:	d111      	bne.n	80034ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ae:	d004      	beq.n	80034ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b8:	d107      	bne.n	80034ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034d2:	d10f      	bne.n	80034f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e010      	b.n	800352a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	3b01      	subs	r3, #1
 8003516:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d196      	bne.n	8003456 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3728      	adds	r7, #40	@ 0x28
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000000 	.word	0x20000000

08003538 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800354c:	d111      	bne.n	8003572 <SPI_EndRxTransaction+0x3a>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003556:	d004      	beq.n	8003562 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003560:	d107      	bne.n	8003572 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003570:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800357a:	d112      	bne.n	80035a2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2200      	movs	r2, #0
 8003584:	2180      	movs	r1, #128	@ 0x80
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7ff feb8 	bl	80032fc <SPI_WaitFlagStateUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d021      	beq.n	80035d6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003596:	f043 0220 	orr.w	r2, r3, #32
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e03d      	b.n	800361e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035a2:	4b21      	ldr	r3, [pc, #132]	@ (8003628 <SPI_EndRxTransaction+0xf0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a21      	ldr	r2, [pc, #132]	@ (800362c <SPI_EndRxTransaction+0xf4>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	0d5b      	lsrs	r3, r3, #21
 80035ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ce:	2b80      	cmp	r3, #128	@ 0x80
 80035d0:	d0f2      	beq.n	80035b8 <SPI_EndRxTransaction+0x80>
 80035d2:	e000      	b.n	80035d6 <SPI_EndRxTransaction+0x9e>
        break;
 80035d4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035de:	d11d      	bne.n	800361c <SPI_EndRxTransaction+0xe4>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035e8:	d004      	beq.n	80035f4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f2:	d113      	bne.n	800361c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff ff03 	bl	800340c <SPI_WaitFifoStateUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e000      	b.n	800361e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000000 	.word	0x20000000
 800362c:	165e9f81 	.word	0x165e9f81

08003630 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2200      	movs	r2, #0
 8003644:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff fedf 	bl	800340c <SPI_WaitFifoStateUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e046      	b.n	80036f2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003664:	4b25      	ldr	r3, [pc, #148]	@ (80036fc <SPI_EndRxTxTransaction+0xcc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a25      	ldr	r2, [pc, #148]	@ (8003700 <SPI_EndRxTxTransaction+0xd0>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	0d5b      	lsrs	r3, r3, #21
 8003670:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003674:	fb02 f303 	mul.w	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003682:	d112      	bne.n	80036aa <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2200      	movs	r2, #0
 800368c:	2180      	movs	r1, #128	@ 0x80
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff fe34 	bl	80032fc <SPI_WaitFlagStateUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369e:	f043 0220 	orr.w	r2, r3, #32
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e023      	b.n	80036f2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c0:	2b80      	cmp	r3, #128	@ 0x80
 80036c2:	d0f2      	beq.n	80036aa <SPI_EndRxTxTransaction+0x7a>
 80036c4:	e000      	b.n	80036c8 <SPI_EndRxTxTransaction+0x98>
        break;
 80036c6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff fe99 	bl	800340c <SPI_WaitFifoStateUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e000      	b.n	80036f2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000
 8003700:	165e9f81 	.word	0x165e9f81

08003704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e040      	b.n	8003798 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd fa90 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2224      	movs	r2, #36	@ 0x24
 8003730:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fe28 	bl	80043a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fbc1 	bl	8003ed8 <UART_SetConfig>
 8003756:	4603      	mov	r3, r0
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e01b      	b.n	8003798 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800376e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800377e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fea7 	bl	80044e4 <UART_CheckIdleState>
 8003796:	4603      	mov	r3, r0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	@ 0x28
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d177      	bne.n	80038a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_UART_Transmit+0x24>
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e070      	b.n	80038aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2221      	movs	r2, #33	@ 0x21
 80037d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d6:	f7fd fba7 	bl	8000f28 <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	88fa      	ldrh	r2, [r7, #6]
 80037e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f4:	d108      	bne.n	8003808 <HAL_UART_Transmit+0x68>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	e003      	b.n	8003810 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003810:	e02f      	b.n	8003872 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2200      	movs	r2, #0
 800381a:	2180      	movs	r1, #128	@ 0x80
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 ff09 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e03b      	b.n	80038aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003846:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	3302      	adds	r3, #2
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e007      	b.n	8003860 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	781a      	ldrb	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3301      	adds	r3, #1
 800385e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1c9      	bne.n	8003812 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2200      	movs	r2, #0
 8003886:	2140      	movs	r1, #64	@ 0x40
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fed3 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e005      	b.n	80038aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b0ba      	sub	sp, #232	@ 0xe8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80038de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80038e2:	4013      	ands	r3, r2
 80038e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80038e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d115      	bne.n	800391c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00f      	beq.n	800391c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 82ac 	beq.w	8003e6a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
      }
      return;
 800391a:	e2a6      	b.n	8003e6a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800391c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8117 	beq.w	8003b54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003932:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003936:	4b85      	ldr	r3, [pc, #532]	@ (8003b4c <HAL_UART_IRQHandler+0x298>)
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 810a 	beq.w	8003b54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d011      	beq.n	8003970 <HAL_UART_IRQHandler+0xbc>
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00b      	beq.n	8003970 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2201      	movs	r2, #1
 800395e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d011      	beq.n	80039a0 <HAL_UART_IRQHandler+0xec>
 800397c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00b      	beq.n	80039a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2202      	movs	r2, #2
 800398e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003996:	f043 0204 	orr.w	r2, r3, #4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d011      	beq.n	80039d0 <HAL_UART_IRQHandler+0x11c>
 80039ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2204      	movs	r2, #4
 80039be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c6:	f043 0202 	orr.w	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d017      	beq.n	8003a0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d105      	bne.n	80039f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00b      	beq.n	8003a0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2208      	movs	r2, #8
 80039fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a02:	f043 0208 	orr.w	r2, r3, #8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d012      	beq.n	8003a3e <HAL_UART_IRQHandler+0x18a>
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00c      	beq.n	8003a3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8212 	beq.w	8003e6e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00d      	beq.n	8003a72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a86:	2b40      	cmp	r3, #64	@ 0x40
 8003a88:	d005      	beq.n	8003a96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d04f      	beq.n	8003b36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fe39 	bl	800470e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa6:	2b40      	cmp	r3, #64	@ 0x40
 8003aa8:	d141      	bne.n	8003b2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3308      	adds	r3, #8
 8003ab0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ab8:	e853 3f00 	ldrex	r3, [r3]
 8003abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1d9      	bne.n	8003aaa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d013      	beq.n	8003b26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b02:	4a13      	ldr	r2, [pc, #76]	@ (8003b50 <HAL_UART_IRQHandler+0x29c>)
 8003b04:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd fb99 	bl	8001242 <HAL_DMA_Abort_IT>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d017      	beq.n	8003b46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b20:	4610      	mov	r0, r2
 8003b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	e00f      	b.n	8003b46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f9b6 	bl	8003e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	e00b      	b.n	8003b46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f9b2 	bl	8003e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	e007      	b.n	8003b46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f9ae 	bl	8003e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003b44:	e193      	b.n	8003e6e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b46:	bf00      	nop
    return;
 8003b48:	e191      	b.n	8003e6e <HAL_UART_IRQHandler+0x5ba>
 8003b4a:	bf00      	nop
 8003b4c:	04000120 	.word	0x04000120
 8003b50:	080047d7 	.word	0x080047d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	f040 814c 	bne.w	8003df6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8145 	beq.w	8003df6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 813e 	beq.w	8003df6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2210      	movs	r2, #16
 8003b80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b40      	cmp	r3, #64	@ 0x40
 8003b8e:	f040 80b6 	bne.w	8003cfe <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8165 	beq.w	8003e72 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	f080 815d 	bcs.w	8003e72 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bcc:	f000 8086 	beq.w	8003cdc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003bfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bfe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1da      	bne.n	8003bd0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3308      	adds	r3, #8
 8003c20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3308      	adds	r3, #8
 8003c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e1      	bne.n	8003c1a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3308      	adds	r3, #8
 8003c76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e3      	bne.n	8003c56 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cac:	f023 0310 	bic.w	r3, r3, #16
 8003cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e4      	bne.n	8003c9c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd fa43 	bl	8001162 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f8d8 	bl	8003eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cfc:	e0b9      	b.n	8003e72 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80ab 	beq.w	8003e76 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80a6 	beq.w	8003e76 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e4      	bne.n	8003d2a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3308      	adds	r3, #8
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3308      	adds	r3, #8
 8003d80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d84:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e3      	bne.n	8003d60 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f023 0310 	bic.w	r3, r3, #16
 8003dc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	69b9      	ldr	r1, [r7, #24]
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	617b      	str	r3, [r7, #20]
   return(result);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e4      	bne.n	8003dac <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f85c 	bl	8003eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003df4:	e03f      	b.n	8003e76 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00e      	beq.n	8003e20 <HAL_UART_IRQHandler+0x56c>
 8003e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003e16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f853 	bl	8003ec4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e1e:	e02d      	b.n	8003e7c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01c      	beq.n	8003e7a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
    }
    return;
 8003e48:	e017      	b.n	8003e7a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d012      	beq.n	8003e7c <HAL_UART_IRQHandler+0x5c8>
 8003e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fccd 	bl	8004802 <UART_EndTransmit_IT>
    return;
 8003e68:	e008      	b.n	8003e7c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003e6a:	bf00      	nop
 8003e6c:	e006      	b.n	8003e7c <HAL_UART_IRQHandler+0x5c8>
    return;
 8003e6e:	bf00      	nop
 8003e70:	e004      	b.n	8003e7c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <HAL_UART_IRQHandler+0x5c8>
    return;
 8003e7a:	bf00      	nop
  }

}
 8003e7c:	37e8      	adds	r7, #232	@ 0xe8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop

08003e84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4ba6      	ldr	r3, [pc, #664]	@ (800419c <UART_SetConfig+0x2c4>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	6979      	ldr	r1, [r7, #20]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a94      	ldr	r2, [pc, #592]	@ (80041a0 <UART_SetConfig+0x2c8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d120      	bne.n	8003f96 <UART_SetConfig+0xbe>
 8003f54:	4b93      	ldr	r3, [pc, #588]	@ (80041a4 <UART_SetConfig+0x2cc>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d816      	bhi.n	8003f90 <UART_SetConfig+0xb8>
 8003f62:	a201      	add	r2, pc, #4	@ (adr r2, 8003f68 <UART_SetConfig+0x90>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003f79 	.word	0x08003f79
 8003f6c:	08003f85 	.word	0x08003f85
 8003f70:	08003f7f 	.word	0x08003f7f
 8003f74:	08003f8b 	.word	0x08003f8b
 8003f78:	2301      	movs	r3, #1
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e150      	b.n	8004220 <UART_SetConfig+0x348>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e14d      	b.n	8004220 <UART_SetConfig+0x348>
 8003f84:	2304      	movs	r3, #4
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e14a      	b.n	8004220 <UART_SetConfig+0x348>
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	77fb      	strb	r3, [r7, #31]
 8003f8e:	e147      	b.n	8004220 <UART_SetConfig+0x348>
 8003f90:	2310      	movs	r3, #16
 8003f92:	77fb      	strb	r3, [r7, #31]
 8003f94:	e144      	b.n	8004220 <UART_SetConfig+0x348>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a83      	ldr	r2, [pc, #524]	@ (80041a8 <UART_SetConfig+0x2d0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d132      	bne.n	8004006 <UART_SetConfig+0x12e>
 8003fa0:	4b80      	ldr	r3, [pc, #512]	@ (80041a4 <UART_SetConfig+0x2cc>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d828      	bhi.n	8004000 <UART_SetConfig+0x128>
 8003fae:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb4 <UART_SetConfig+0xdc>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08003fe9 	.word	0x08003fe9
 8003fb8:	08004001 	.word	0x08004001
 8003fbc:	08004001 	.word	0x08004001
 8003fc0:	08004001 	.word	0x08004001
 8003fc4:	08003ff5 	.word	0x08003ff5
 8003fc8:	08004001 	.word	0x08004001
 8003fcc:	08004001 	.word	0x08004001
 8003fd0:	08004001 	.word	0x08004001
 8003fd4:	08003fef 	.word	0x08003fef
 8003fd8:	08004001 	.word	0x08004001
 8003fdc:	08004001 	.word	0x08004001
 8003fe0:	08004001 	.word	0x08004001
 8003fe4:	08003ffb 	.word	0x08003ffb
 8003fe8:	2300      	movs	r3, #0
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e118      	b.n	8004220 <UART_SetConfig+0x348>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	77fb      	strb	r3, [r7, #31]
 8003ff2:	e115      	b.n	8004220 <UART_SetConfig+0x348>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e112      	b.n	8004220 <UART_SetConfig+0x348>
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	77fb      	strb	r3, [r7, #31]
 8003ffe:	e10f      	b.n	8004220 <UART_SetConfig+0x348>
 8004000:	2310      	movs	r3, #16
 8004002:	77fb      	strb	r3, [r7, #31]
 8004004:	e10c      	b.n	8004220 <UART_SetConfig+0x348>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a68      	ldr	r2, [pc, #416]	@ (80041ac <UART_SetConfig+0x2d4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d120      	bne.n	8004052 <UART_SetConfig+0x17a>
 8004010:	4b64      	ldr	r3, [pc, #400]	@ (80041a4 <UART_SetConfig+0x2cc>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800401a:	2b30      	cmp	r3, #48	@ 0x30
 800401c:	d013      	beq.n	8004046 <UART_SetConfig+0x16e>
 800401e:	2b30      	cmp	r3, #48	@ 0x30
 8004020:	d814      	bhi.n	800404c <UART_SetConfig+0x174>
 8004022:	2b20      	cmp	r3, #32
 8004024:	d009      	beq.n	800403a <UART_SetConfig+0x162>
 8004026:	2b20      	cmp	r3, #32
 8004028:	d810      	bhi.n	800404c <UART_SetConfig+0x174>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <UART_SetConfig+0x15c>
 800402e:	2b10      	cmp	r3, #16
 8004030:	d006      	beq.n	8004040 <UART_SetConfig+0x168>
 8004032:	e00b      	b.n	800404c <UART_SetConfig+0x174>
 8004034:	2300      	movs	r3, #0
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e0f2      	b.n	8004220 <UART_SetConfig+0x348>
 800403a:	2302      	movs	r3, #2
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e0ef      	b.n	8004220 <UART_SetConfig+0x348>
 8004040:	2304      	movs	r3, #4
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	e0ec      	b.n	8004220 <UART_SetConfig+0x348>
 8004046:	2308      	movs	r3, #8
 8004048:	77fb      	strb	r3, [r7, #31]
 800404a:	e0e9      	b.n	8004220 <UART_SetConfig+0x348>
 800404c:	2310      	movs	r3, #16
 800404e:	77fb      	strb	r3, [r7, #31]
 8004050:	e0e6      	b.n	8004220 <UART_SetConfig+0x348>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a56      	ldr	r2, [pc, #344]	@ (80041b0 <UART_SetConfig+0x2d8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d120      	bne.n	800409e <UART_SetConfig+0x1c6>
 800405c:	4b51      	ldr	r3, [pc, #324]	@ (80041a4 <UART_SetConfig+0x2cc>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004062:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004066:	2bc0      	cmp	r3, #192	@ 0xc0
 8004068:	d013      	beq.n	8004092 <UART_SetConfig+0x1ba>
 800406a:	2bc0      	cmp	r3, #192	@ 0xc0
 800406c:	d814      	bhi.n	8004098 <UART_SetConfig+0x1c0>
 800406e:	2b80      	cmp	r3, #128	@ 0x80
 8004070:	d009      	beq.n	8004086 <UART_SetConfig+0x1ae>
 8004072:	2b80      	cmp	r3, #128	@ 0x80
 8004074:	d810      	bhi.n	8004098 <UART_SetConfig+0x1c0>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <UART_SetConfig+0x1a8>
 800407a:	2b40      	cmp	r3, #64	@ 0x40
 800407c:	d006      	beq.n	800408c <UART_SetConfig+0x1b4>
 800407e:	e00b      	b.n	8004098 <UART_SetConfig+0x1c0>
 8004080:	2300      	movs	r3, #0
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e0cc      	b.n	8004220 <UART_SetConfig+0x348>
 8004086:	2302      	movs	r3, #2
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e0c9      	b.n	8004220 <UART_SetConfig+0x348>
 800408c:	2304      	movs	r3, #4
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e0c6      	b.n	8004220 <UART_SetConfig+0x348>
 8004092:	2308      	movs	r3, #8
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e0c3      	b.n	8004220 <UART_SetConfig+0x348>
 8004098:	2310      	movs	r3, #16
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e0c0      	b.n	8004220 <UART_SetConfig+0x348>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a44      	ldr	r2, [pc, #272]	@ (80041b4 <UART_SetConfig+0x2dc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d125      	bne.n	80040f4 <UART_SetConfig+0x21c>
 80040a8:	4b3e      	ldr	r3, [pc, #248]	@ (80041a4 <UART_SetConfig+0x2cc>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040b6:	d017      	beq.n	80040e8 <UART_SetConfig+0x210>
 80040b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040bc:	d817      	bhi.n	80040ee <UART_SetConfig+0x216>
 80040be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040c2:	d00b      	beq.n	80040dc <UART_SetConfig+0x204>
 80040c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040c8:	d811      	bhi.n	80040ee <UART_SetConfig+0x216>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <UART_SetConfig+0x1fe>
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d2:	d006      	beq.n	80040e2 <UART_SetConfig+0x20a>
 80040d4:	e00b      	b.n	80040ee <UART_SetConfig+0x216>
 80040d6:	2300      	movs	r3, #0
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e0a1      	b.n	8004220 <UART_SetConfig+0x348>
 80040dc:	2302      	movs	r3, #2
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e09e      	b.n	8004220 <UART_SetConfig+0x348>
 80040e2:	2304      	movs	r3, #4
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e09b      	b.n	8004220 <UART_SetConfig+0x348>
 80040e8:	2308      	movs	r3, #8
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e098      	b.n	8004220 <UART_SetConfig+0x348>
 80040ee:	2310      	movs	r3, #16
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e095      	b.n	8004220 <UART_SetConfig+0x348>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a2f      	ldr	r2, [pc, #188]	@ (80041b8 <UART_SetConfig+0x2e0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d125      	bne.n	800414a <UART_SetConfig+0x272>
 80040fe:	4b29      	ldr	r3, [pc, #164]	@ (80041a4 <UART_SetConfig+0x2cc>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004104:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004108:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800410c:	d017      	beq.n	800413e <UART_SetConfig+0x266>
 800410e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004112:	d817      	bhi.n	8004144 <UART_SetConfig+0x26c>
 8004114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004118:	d00b      	beq.n	8004132 <UART_SetConfig+0x25a>
 800411a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800411e:	d811      	bhi.n	8004144 <UART_SetConfig+0x26c>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <UART_SetConfig+0x254>
 8004124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004128:	d006      	beq.n	8004138 <UART_SetConfig+0x260>
 800412a:	e00b      	b.n	8004144 <UART_SetConfig+0x26c>
 800412c:	2301      	movs	r3, #1
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e076      	b.n	8004220 <UART_SetConfig+0x348>
 8004132:	2302      	movs	r3, #2
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e073      	b.n	8004220 <UART_SetConfig+0x348>
 8004138:	2304      	movs	r3, #4
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e070      	b.n	8004220 <UART_SetConfig+0x348>
 800413e:	2308      	movs	r3, #8
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e06d      	b.n	8004220 <UART_SetConfig+0x348>
 8004144:	2310      	movs	r3, #16
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e06a      	b.n	8004220 <UART_SetConfig+0x348>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1b      	ldr	r2, [pc, #108]	@ (80041bc <UART_SetConfig+0x2e4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d138      	bne.n	80041c6 <UART_SetConfig+0x2ee>
 8004154:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <UART_SetConfig+0x2cc>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800415e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004162:	d017      	beq.n	8004194 <UART_SetConfig+0x2bc>
 8004164:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004168:	d82a      	bhi.n	80041c0 <UART_SetConfig+0x2e8>
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416e:	d00b      	beq.n	8004188 <UART_SetConfig+0x2b0>
 8004170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004174:	d824      	bhi.n	80041c0 <UART_SetConfig+0x2e8>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <UART_SetConfig+0x2aa>
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417e:	d006      	beq.n	800418e <UART_SetConfig+0x2b6>
 8004180:	e01e      	b.n	80041c0 <UART_SetConfig+0x2e8>
 8004182:	2300      	movs	r3, #0
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e04b      	b.n	8004220 <UART_SetConfig+0x348>
 8004188:	2302      	movs	r3, #2
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e048      	b.n	8004220 <UART_SetConfig+0x348>
 800418e:	2304      	movs	r3, #4
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e045      	b.n	8004220 <UART_SetConfig+0x348>
 8004194:	2308      	movs	r3, #8
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e042      	b.n	8004220 <UART_SetConfig+0x348>
 800419a:	bf00      	nop
 800419c:	efff69f3 	.word	0xefff69f3
 80041a0:	40011000 	.word	0x40011000
 80041a4:	40023800 	.word	0x40023800
 80041a8:	40004400 	.word	0x40004400
 80041ac:	40004800 	.word	0x40004800
 80041b0:	40004c00 	.word	0x40004c00
 80041b4:	40005000 	.word	0x40005000
 80041b8:	40011400 	.word	0x40011400
 80041bc:	40007800 	.word	0x40007800
 80041c0:	2310      	movs	r3, #16
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e02c      	b.n	8004220 <UART_SetConfig+0x348>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a72      	ldr	r2, [pc, #456]	@ (8004394 <UART_SetConfig+0x4bc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d125      	bne.n	800421c <UART_SetConfig+0x344>
 80041d0:	4b71      	ldr	r3, [pc, #452]	@ (8004398 <UART_SetConfig+0x4c0>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80041da:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80041de:	d017      	beq.n	8004210 <UART_SetConfig+0x338>
 80041e0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80041e4:	d817      	bhi.n	8004216 <UART_SetConfig+0x33e>
 80041e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ea:	d00b      	beq.n	8004204 <UART_SetConfig+0x32c>
 80041ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041f0:	d811      	bhi.n	8004216 <UART_SetConfig+0x33e>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <UART_SetConfig+0x326>
 80041f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041fa:	d006      	beq.n	800420a <UART_SetConfig+0x332>
 80041fc:	e00b      	b.n	8004216 <UART_SetConfig+0x33e>
 80041fe:	2300      	movs	r3, #0
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e00d      	b.n	8004220 <UART_SetConfig+0x348>
 8004204:	2302      	movs	r3, #2
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e00a      	b.n	8004220 <UART_SetConfig+0x348>
 800420a:	2304      	movs	r3, #4
 800420c:	77fb      	strb	r3, [r7, #31]
 800420e:	e007      	b.n	8004220 <UART_SetConfig+0x348>
 8004210:	2308      	movs	r3, #8
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	e004      	b.n	8004220 <UART_SetConfig+0x348>
 8004216:	2310      	movs	r3, #16
 8004218:	77fb      	strb	r3, [r7, #31]
 800421a:	e001      	b.n	8004220 <UART_SetConfig+0x348>
 800421c:	2310      	movs	r3, #16
 800421e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004228:	d15b      	bne.n	80042e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800422a:	7ffb      	ldrb	r3, [r7, #31]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d828      	bhi.n	8004282 <UART_SetConfig+0x3aa>
 8004230:	a201      	add	r2, pc, #4	@ (adr r2, 8004238 <UART_SetConfig+0x360>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	0800425d 	.word	0x0800425d
 800423c:	08004265 	.word	0x08004265
 8004240:	0800426d 	.word	0x0800426d
 8004244:	08004283 	.word	0x08004283
 8004248:	08004273 	.word	0x08004273
 800424c:	08004283 	.word	0x08004283
 8004250:	08004283 	.word	0x08004283
 8004254:	08004283 	.word	0x08004283
 8004258:	0800427b 	.word	0x0800427b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800425c:	f7fd fee6 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 8004260:	61b8      	str	r0, [r7, #24]
        break;
 8004262:	e013      	b.n	800428c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004264:	f7fd fef6 	bl	8002054 <HAL_RCC_GetPCLK2Freq>
 8004268:	61b8      	str	r0, [r7, #24]
        break;
 800426a:	e00f      	b.n	800428c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800426c:	4b4b      	ldr	r3, [pc, #300]	@ (800439c <UART_SetConfig+0x4c4>)
 800426e:	61bb      	str	r3, [r7, #24]
        break;
 8004270:	e00c      	b.n	800428c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004272:	f7fd fdc9 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8004276:	61b8      	str	r0, [r7, #24]
        break;
 8004278:	e008      	b.n	800428c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800427a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800427e:	61bb      	str	r3, [r7, #24]
        break;
 8004280:	e004      	b.n	800428c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	77bb      	strb	r3, [r7, #30]
        break;
 800428a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d074      	beq.n	800437c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	005a      	lsls	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	441a      	add	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	2b0f      	cmp	r3, #15
 80042ac:	d916      	bls.n	80042dc <UART_SetConfig+0x404>
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b4:	d212      	bcs.n	80042dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f023 030f 	bic.w	r3, r3, #15
 80042be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	89fb      	ldrh	r3, [r7, #14]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	89fa      	ldrh	r2, [r7, #14]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	e04f      	b.n	800437c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	77bb      	strb	r3, [r7, #30]
 80042e0:	e04c      	b.n	800437c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042e2:	7ffb      	ldrb	r3, [r7, #31]
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d828      	bhi.n	800433a <UART_SetConfig+0x462>
 80042e8:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <UART_SetConfig+0x418>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004315 	.word	0x08004315
 80042f4:	0800431d 	.word	0x0800431d
 80042f8:	08004325 	.word	0x08004325
 80042fc:	0800433b 	.word	0x0800433b
 8004300:	0800432b 	.word	0x0800432b
 8004304:	0800433b 	.word	0x0800433b
 8004308:	0800433b 	.word	0x0800433b
 800430c:	0800433b 	.word	0x0800433b
 8004310:	08004333 	.word	0x08004333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004314:	f7fd fe8a 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 8004318:	61b8      	str	r0, [r7, #24]
        break;
 800431a:	e013      	b.n	8004344 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800431c:	f7fd fe9a 	bl	8002054 <HAL_RCC_GetPCLK2Freq>
 8004320:	61b8      	str	r0, [r7, #24]
        break;
 8004322:	e00f      	b.n	8004344 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004324:	4b1d      	ldr	r3, [pc, #116]	@ (800439c <UART_SetConfig+0x4c4>)
 8004326:	61bb      	str	r3, [r7, #24]
        break;
 8004328:	e00c      	b.n	8004344 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800432a:	f7fd fd6d 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 800432e:	61b8      	str	r0, [r7, #24]
        break;
 8004330:	e008      	b.n	8004344 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004336:	61bb      	str	r3, [r7, #24]
        break;
 8004338:	e004      	b.n	8004344 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	77bb      	strb	r3, [r7, #30]
        break;
 8004342:	bf00      	nop
    }

    if (pclk != 0U)
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d018      	beq.n	800437c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	085a      	lsrs	r2, r3, #1
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	441a      	add	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	fbb2 f3f3 	udiv	r3, r2, r3
 800435c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b0f      	cmp	r3, #15
 8004362:	d909      	bls.n	8004378 <UART_SetConfig+0x4a0>
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800436a:	d205      	bcs.n	8004378 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	e001      	b.n	800437c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004388:	7fbb      	ldrb	r3, [r7, #30]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40007c00 	.word	0x40007c00
 8004398:	40023800 	.word	0x40023800
 800439c:	00f42400 	.word	0x00f42400

080043a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01a      	beq.n	80044b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800449e:	d10a      	bne.n	80044b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b098      	sub	sp, #96	@ 0x60
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044f4:	f7fc fd18 	bl	8000f28 <HAL_GetTick>
 80044f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b08      	cmp	r3, #8
 8004506:	d12e      	bne.n	8004566 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004508:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004510:	2200      	movs	r2, #0
 8004512:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f88c 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d021      	beq.n	8004566 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004536:	653b      	str	r3, [r7, #80]	@ 0x50
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004540:	647b      	str	r3, [r7, #68]	@ 0x44
 8004542:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800454e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e6      	bne.n	8004522 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e062      	b.n	800462c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b04      	cmp	r3, #4
 8004572:	d149      	bne.n	8004608 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004574:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457c:	2200      	movs	r2, #0
 800457e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f856 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d03c      	beq.n	8004608 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	623b      	str	r3, [r7, #32]
   return(result);
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e6      	bne.n	800458e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3308      	adds	r3, #8
 80045c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3308      	adds	r3, #8
 80045de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045e0:	61fa      	str	r2, [r7, #28]
 80045e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	69b9      	ldr	r1, [r7, #24]
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	617b      	str	r3, [r7, #20]
   return(result);
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e5      	bne.n	80045c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e011      	b.n	800462c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3758      	adds	r7, #88	@ 0x58
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004644:	e04f      	b.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d04b      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464e:	f7fc fc6b 	bl	8000f28 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <UART_WaitOnFlagUntilTimeout+0x30>
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e04e      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d037      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b80      	cmp	r3, #128	@ 0x80
 800467a:	d034      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b40      	cmp	r3, #64	@ 0x40
 8004680:	d031      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b08      	cmp	r3, #8
 800468e:	d110      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2208      	movs	r2, #8
 8004696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f838 	bl	800470e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2208      	movs	r2, #8
 80046a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e029      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046c0:	d111      	bne.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f81e 	bl	800470e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e00f      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4013      	ands	r3, r2
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	429a      	cmp	r2, r3
 8004702:	d0a0      	beq.n	8004646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800470e:	b480      	push	{r7}
 8004710:	b095      	sub	sp, #84	@ 0x54
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004726:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800472a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004734:	643b      	str	r3, [r7, #64]	@ 0x40
 8004736:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800473a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e6      	bne.n	8004716 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3308      	adds	r3, #8
 800474e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	61fb      	str	r3, [r7, #28]
   return(result);
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3308      	adds	r3, #8
 8004766:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004768:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800476a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800476e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e5      	bne.n	8004748 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004780:	2b01      	cmp	r3, #1
 8004782:	d118      	bne.n	80047b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	60bb      	str	r3, [r7, #8]
   return(result);
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f023 0310 	bic.w	r3, r3, #16
 8004798:	647b      	str	r3, [r7, #68]	@ 0x44
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	6979      	ldr	r1, [r7, #20]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	613b      	str	r3, [r7, #16]
   return(result);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e6      	bne.n	8004784 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047ca:	bf00      	nop
 80047cc:	3754      	adds	r7, #84	@ 0x54
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7ff fb4f 	bl	8003e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b088      	sub	sp, #32
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	60bb      	str	r3, [r7, #8]
   return(result);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	6979      	ldr	r1, [r7, #20]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	613b      	str	r3, [r7, #16]
   return(result);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e6      	bne.n	800480a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff fb1b 	bl	8003e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800484e:	bf00      	nop
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <sniprintf>:
 8004858:	b40c      	push	{r2, r3}
 800485a:	b530      	push	{r4, r5, lr}
 800485c:	4b17      	ldr	r3, [pc, #92]	@ (80048bc <sniprintf+0x64>)
 800485e:	1e0c      	subs	r4, r1, #0
 8004860:	681d      	ldr	r5, [r3, #0]
 8004862:	b09d      	sub	sp, #116	@ 0x74
 8004864:	da08      	bge.n	8004878 <sniprintf+0x20>
 8004866:	238b      	movs	r3, #139	@ 0x8b
 8004868:	602b      	str	r3, [r5, #0]
 800486a:	f04f 30ff 	mov.w	r0, #4294967295
 800486e:	b01d      	add	sp, #116	@ 0x74
 8004870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004874:	b002      	add	sp, #8
 8004876:	4770      	bx	lr
 8004878:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800487c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004880:	bf14      	ite	ne
 8004882:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004886:	4623      	moveq	r3, r4
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	9307      	str	r3, [sp, #28]
 800488c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004890:	9002      	str	r0, [sp, #8]
 8004892:	9006      	str	r0, [sp, #24]
 8004894:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004898:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800489a:	ab21      	add	r3, sp, #132	@ 0x84
 800489c:	a902      	add	r1, sp, #8
 800489e:	4628      	mov	r0, r5
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	f000 f9a9 	bl	8004bf8 <_svfiprintf_r>
 80048a6:	1c43      	adds	r3, r0, #1
 80048a8:	bfbc      	itt	lt
 80048aa:	238b      	movlt	r3, #139	@ 0x8b
 80048ac:	602b      	strlt	r3, [r5, #0]
 80048ae:	2c00      	cmp	r4, #0
 80048b0:	d0dd      	beq.n	800486e <sniprintf+0x16>
 80048b2:	9b02      	ldr	r3, [sp, #8]
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
 80048b8:	e7d9      	b.n	800486e <sniprintf+0x16>
 80048ba:	bf00      	nop
 80048bc:	2000000c 	.word	0x2000000c

080048c0 <memset>:
 80048c0:	4402      	add	r2, r0
 80048c2:	4603      	mov	r3, r0
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d100      	bne.n	80048ca <memset+0xa>
 80048c8:	4770      	bx	lr
 80048ca:	f803 1b01 	strb.w	r1, [r3], #1
 80048ce:	e7f9      	b.n	80048c4 <memset+0x4>

080048d0 <strncat>:
 80048d0:	b530      	push	{r4, r5, lr}
 80048d2:	4604      	mov	r4, r0
 80048d4:	7825      	ldrb	r5, [r4, #0]
 80048d6:	4623      	mov	r3, r4
 80048d8:	3401      	adds	r4, #1
 80048da:	2d00      	cmp	r5, #0
 80048dc:	d1fa      	bne.n	80048d4 <strncat+0x4>
 80048de:	3a01      	subs	r2, #1
 80048e0:	d304      	bcc.n	80048ec <strncat+0x1c>
 80048e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048e6:	f803 4b01 	strb.w	r4, [r3], #1
 80048ea:	b904      	cbnz	r4, 80048ee <strncat+0x1e>
 80048ec:	bd30      	pop	{r4, r5, pc}
 80048ee:	2a00      	cmp	r2, #0
 80048f0:	d1f5      	bne.n	80048de <strncat+0xe>
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	e7f3      	b.n	80048de <strncat+0xe>
	...

080048f8 <__errno>:
 80048f8:	4b01      	ldr	r3, [pc, #4]	@ (8004900 <__errno+0x8>)
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	2000000c 	.word	0x2000000c

08004904 <__libc_init_array>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	4d0d      	ldr	r5, [pc, #52]	@ (800493c <__libc_init_array+0x38>)
 8004908:	4c0d      	ldr	r4, [pc, #52]	@ (8004940 <__libc_init_array+0x3c>)
 800490a:	1b64      	subs	r4, r4, r5
 800490c:	10a4      	asrs	r4, r4, #2
 800490e:	2600      	movs	r6, #0
 8004910:	42a6      	cmp	r6, r4
 8004912:	d109      	bne.n	8004928 <__libc_init_array+0x24>
 8004914:	4d0b      	ldr	r5, [pc, #44]	@ (8004944 <__libc_init_array+0x40>)
 8004916:	4c0c      	ldr	r4, [pc, #48]	@ (8004948 <__libc_init_array+0x44>)
 8004918:	f000 fc66 	bl	80051e8 <_init>
 800491c:	1b64      	subs	r4, r4, r5
 800491e:	10a4      	asrs	r4, r4, #2
 8004920:	2600      	movs	r6, #0
 8004922:	42a6      	cmp	r6, r4
 8004924:	d105      	bne.n	8004932 <__libc_init_array+0x2e>
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	f855 3b04 	ldr.w	r3, [r5], #4
 800492c:	4798      	blx	r3
 800492e:	3601      	adds	r6, #1
 8004930:	e7ee      	b.n	8004910 <__libc_init_array+0xc>
 8004932:	f855 3b04 	ldr.w	r3, [r5], #4
 8004936:	4798      	blx	r3
 8004938:	3601      	adds	r6, #1
 800493a:	e7f2      	b.n	8004922 <__libc_init_array+0x1e>
 800493c:	08005268 	.word	0x08005268
 8004940:	08005268 	.word	0x08005268
 8004944:	08005268 	.word	0x08005268
 8004948:	0800526c 	.word	0x0800526c

0800494c <__retarget_lock_acquire_recursive>:
 800494c:	4770      	bx	lr

0800494e <__retarget_lock_release_recursive>:
 800494e:	4770      	bx	lr

08004950 <_free_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4605      	mov	r5, r0
 8004954:	2900      	cmp	r1, #0
 8004956:	d041      	beq.n	80049dc <_free_r+0x8c>
 8004958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800495c:	1f0c      	subs	r4, r1, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	bfb8      	it	lt
 8004962:	18e4      	addlt	r4, r4, r3
 8004964:	f000 f8e0 	bl	8004b28 <__malloc_lock>
 8004968:	4a1d      	ldr	r2, [pc, #116]	@ (80049e0 <_free_r+0x90>)
 800496a:	6813      	ldr	r3, [r2, #0]
 800496c:	b933      	cbnz	r3, 800497c <_free_r+0x2c>
 800496e:	6063      	str	r3, [r4, #4]
 8004970:	6014      	str	r4, [r2, #0]
 8004972:	4628      	mov	r0, r5
 8004974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004978:	f000 b8dc 	b.w	8004b34 <__malloc_unlock>
 800497c:	42a3      	cmp	r3, r4
 800497e:	d908      	bls.n	8004992 <_free_r+0x42>
 8004980:	6820      	ldr	r0, [r4, #0]
 8004982:	1821      	adds	r1, r4, r0
 8004984:	428b      	cmp	r3, r1
 8004986:	bf01      	itttt	eq
 8004988:	6819      	ldreq	r1, [r3, #0]
 800498a:	685b      	ldreq	r3, [r3, #4]
 800498c:	1809      	addeq	r1, r1, r0
 800498e:	6021      	streq	r1, [r4, #0]
 8004990:	e7ed      	b.n	800496e <_free_r+0x1e>
 8004992:	461a      	mov	r2, r3
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	b10b      	cbz	r3, 800499c <_free_r+0x4c>
 8004998:	42a3      	cmp	r3, r4
 800499a:	d9fa      	bls.n	8004992 <_free_r+0x42>
 800499c:	6811      	ldr	r1, [r2, #0]
 800499e:	1850      	adds	r0, r2, r1
 80049a0:	42a0      	cmp	r0, r4
 80049a2:	d10b      	bne.n	80049bc <_free_r+0x6c>
 80049a4:	6820      	ldr	r0, [r4, #0]
 80049a6:	4401      	add	r1, r0
 80049a8:	1850      	adds	r0, r2, r1
 80049aa:	4283      	cmp	r3, r0
 80049ac:	6011      	str	r1, [r2, #0]
 80049ae:	d1e0      	bne.n	8004972 <_free_r+0x22>
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	6053      	str	r3, [r2, #4]
 80049b6:	4408      	add	r0, r1
 80049b8:	6010      	str	r0, [r2, #0]
 80049ba:	e7da      	b.n	8004972 <_free_r+0x22>
 80049bc:	d902      	bls.n	80049c4 <_free_r+0x74>
 80049be:	230c      	movs	r3, #12
 80049c0:	602b      	str	r3, [r5, #0]
 80049c2:	e7d6      	b.n	8004972 <_free_r+0x22>
 80049c4:	6820      	ldr	r0, [r4, #0]
 80049c6:	1821      	adds	r1, r4, r0
 80049c8:	428b      	cmp	r3, r1
 80049ca:	bf04      	itt	eq
 80049cc:	6819      	ldreq	r1, [r3, #0]
 80049ce:	685b      	ldreq	r3, [r3, #4]
 80049d0:	6063      	str	r3, [r4, #4]
 80049d2:	bf04      	itt	eq
 80049d4:	1809      	addeq	r1, r1, r0
 80049d6:	6021      	streq	r1, [r4, #0]
 80049d8:	6054      	str	r4, [r2, #4]
 80049da:	e7ca      	b.n	8004972 <_free_r+0x22>
 80049dc:	bd38      	pop	{r3, r4, r5, pc}
 80049de:	bf00      	nop
 80049e0:	200002b0 	.word	0x200002b0

080049e4 <sbrk_aligned>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	4e0f      	ldr	r6, [pc, #60]	@ (8004a24 <sbrk_aligned+0x40>)
 80049e8:	460c      	mov	r4, r1
 80049ea:	6831      	ldr	r1, [r6, #0]
 80049ec:	4605      	mov	r5, r0
 80049ee:	b911      	cbnz	r1, 80049f6 <sbrk_aligned+0x12>
 80049f0:	f000 fba6 	bl	8005140 <_sbrk_r>
 80049f4:	6030      	str	r0, [r6, #0]
 80049f6:	4621      	mov	r1, r4
 80049f8:	4628      	mov	r0, r5
 80049fa:	f000 fba1 	bl	8005140 <_sbrk_r>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	d103      	bne.n	8004a0a <sbrk_aligned+0x26>
 8004a02:	f04f 34ff 	mov.w	r4, #4294967295
 8004a06:	4620      	mov	r0, r4
 8004a08:	bd70      	pop	{r4, r5, r6, pc}
 8004a0a:	1cc4      	adds	r4, r0, #3
 8004a0c:	f024 0403 	bic.w	r4, r4, #3
 8004a10:	42a0      	cmp	r0, r4
 8004a12:	d0f8      	beq.n	8004a06 <sbrk_aligned+0x22>
 8004a14:	1a21      	subs	r1, r4, r0
 8004a16:	4628      	mov	r0, r5
 8004a18:	f000 fb92 	bl	8005140 <_sbrk_r>
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d1f2      	bne.n	8004a06 <sbrk_aligned+0x22>
 8004a20:	e7ef      	b.n	8004a02 <sbrk_aligned+0x1e>
 8004a22:	bf00      	nop
 8004a24:	200002ac 	.word	0x200002ac

08004a28 <_malloc_r>:
 8004a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a2c:	1ccd      	adds	r5, r1, #3
 8004a2e:	f025 0503 	bic.w	r5, r5, #3
 8004a32:	3508      	adds	r5, #8
 8004a34:	2d0c      	cmp	r5, #12
 8004a36:	bf38      	it	cc
 8004a38:	250c      	movcc	r5, #12
 8004a3a:	2d00      	cmp	r5, #0
 8004a3c:	4606      	mov	r6, r0
 8004a3e:	db01      	blt.n	8004a44 <_malloc_r+0x1c>
 8004a40:	42a9      	cmp	r1, r5
 8004a42:	d904      	bls.n	8004a4e <_malloc_r+0x26>
 8004a44:	230c      	movs	r3, #12
 8004a46:	6033      	str	r3, [r6, #0]
 8004a48:	2000      	movs	r0, #0
 8004a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b24 <_malloc_r+0xfc>
 8004a52:	f000 f869 	bl	8004b28 <__malloc_lock>
 8004a56:	f8d8 3000 	ldr.w	r3, [r8]
 8004a5a:	461c      	mov	r4, r3
 8004a5c:	bb44      	cbnz	r4, 8004ab0 <_malloc_r+0x88>
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4630      	mov	r0, r6
 8004a62:	f7ff ffbf 	bl	80049e4 <sbrk_aligned>
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	4604      	mov	r4, r0
 8004a6a:	d158      	bne.n	8004b1e <_malloc_r+0xf6>
 8004a6c:	f8d8 4000 	ldr.w	r4, [r8]
 8004a70:	4627      	mov	r7, r4
 8004a72:	2f00      	cmp	r7, #0
 8004a74:	d143      	bne.n	8004afe <_malloc_r+0xd6>
 8004a76:	2c00      	cmp	r4, #0
 8004a78:	d04b      	beq.n	8004b12 <_malloc_r+0xea>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	4630      	mov	r0, r6
 8004a80:	eb04 0903 	add.w	r9, r4, r3
 8004a84:	f000 fb5c 	bl	8005140 <_sbrk_r>
 8004a88:	4581      	cmp	r9, r0
 8004a8a:	d142      	bne.n	8004b12 <_malloc_r+0xea>
 8004a8c:	6821      	ldr	r1, [r4, #0]
 8004a8e:	1a6d      	subs	r5, r5, r1
 8004a90:	4629      	mov	r1, r5
 8004a92:	4630      	mov	r0, r6
 8004a94:	f7ff ffa6 	bl	80049e4 <sbrk_aligned>
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d03a      	beq.n	8004b12 <_malloc_r+0xea>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	442b      	add	r3, r5
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	bb62      	cbnz	r2, 8004b04 <_malloc_r+0xdc>
 8004aaa:	f8c8 7000 	str.w	r7, [r8]
 8004aae:	e00f      	b.n	8004ad0 <_malloc_r+0xa8>
 8004ab0:	6822      	ldr	r2, [r4, #0]
 8004ab2:	1b52      	subs	r2, r2, r5
 8004ab4:	d420      	bmi.n	8004af8 <_malloc_r+0xd0>
 8004ab6:	2a0b      	cmp	r2, #11
 8004ab8:	d917      	bls.n	8004aea <_malloc_r+0xc2>
 8004aba:	1961      	adds	r1, r4, r5
 8004abc:	42a3      	cmp	r3, r4
 8004abe:	6025      	str	r5, [r4, #0]
 8004ac0:	bf18      	it	ne
 8004ac2:	6059      	strne	r1, [r3, #4]
 8004ac4:	6863      	ldr	r3, [r4, #4]
 8004ac6:	bf08      	it	eq
 8004ac8:	f8c8 1000 	streq.w	r1, [r8]
 8004acc:	5162      	str	r2, [r4, r5]
 8004ace:	604b      	str	r3, [r1, #4]
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f000 f82f 	bl	8004b34 <__malloc_unlock>
 8004ad6:	f104 000b 	add.w	r0, r4, #11
 8004ada:	1d23      	adds	r3, r4, #4
 8004adc:	f020 0007 	bic.w	r0, r0, #7
 8004ae0:	1ac2      	subs	r2, r0, r3
 8004ae2:	bf1c      	itt	ne
 8004ae4:	1a1b      	subne	r3, r3, r0
 8004ae6:	50a3      	strne	r3, [r4, r2]
 8004ae8:	e7af      	b.n	8004a4a <_malloc_r+0x22>
 8004aea:	6862      	ldr	r2, [r4, #4]
 8004aec:	42a3      	cmp	r3, r4
 8004aee:	bf0c      	ite	eq
 8004af0:	f8c8 2000 	streq.w	r2, [r8]
 8004af4:	605a      	strne	r2, [r3, #4]
 8004af6:	e7eb      	b.n	8004ad0 <_malloc_r+0xa8>
 8004af8:	4623      	mov	r3, r4
 8004afa:	6864      	ldr	r4, [r4, #4]
 8004afc:	e7ae      	b.n	8004a5c <_malloc_r+0x34>
 8004afe:	463c      	mov	r4, r7
 8004b00:	687f      	ldr	r7, [r7, #4]
 8004b02:	e7b6      	b.n	8004a72 <_malloc_r+0x4a>
 8004b04:	461a      	mov	r2, r3
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	d1fb      	bne.n	8004b04 <_malloc_r+0xdc>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6053      	str	r3, [r2, #4]
 8004b10:	e7de      	b.n	8004ad0 <_malloc_r+0xa8>
 8004b12:	230c      	movs	r3, #12
 8004b14:	6033      	str	r3, [r6, #0]
 8004b16:	4630      	mov	r0, r6
 8004b18:	f000 f80c 	bl	8004b34 <__malloc_unlock>
 8004b1c:	e794      	b.n	8004a48 <_malloc_r+0x20>
 8004b1e:	6005      	str	r5, [r0, #0]
 8004b20:	e7d6      	b.n	8004ad0 <_malloc_r+0xa8>
 8004b22:	bf00      	nop
 8004b24:	200002b0 	.word	0x200002b0

08004b28 <__malloc_lock>:
 8004b28:	4801      	ldr	r0, [pc, #4]	@ (8004b30 <__malloc_lock+0x8>)
 8004b2a:	f7ff bf0f 	b.w	800494c <__retarget_lock_acquire_recursive>
 8004b2e:	bf00      	nop
 8004b30:	200002a8 	.word	0x200002a8

08004b34 <__malloc_unlock>:
 8004b34:	4801      	ldr	r0, [pc, #4]	@ (8004b3c <__malloc_unlock+0x8>)
 8004b36:	f7ff bf0a 	b.w	800494e <__retarget_lock_release_recursive>
 8004b3a:	bf00      	nop
 8004b3c:	200002a8 	.word	0x200002a8

08004b40 <__ssputs_r>:
 8004b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b44:	688e      	ldr	r6, [r1, #8]
 8004b46:	461f      	mov	r7, r3
 8004b48:	42be      	cmp	r6, r7
 8004b4a:	680b      	ldr	r3, [r1, #0]
 8004b4c:	4682      	mov	sl, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	4690      	mov	r8, r2
 8004b52:	d82d      	bhi.n	8004bb0 <__ssputs_r+0x70>
 8004b54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b5c:	d026      	beq.n	8004bac <__ssputs_r+0x6c>
 8004b5e:	6965      	ldr	r5, [r4, #20]
 8004b60:	6909      	ldr	r1, [r1, #16]
 8004b62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b66:	eba3 0901 	sub.w	r9, r3, r1
 8004b6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b6e:	1c7b      	adds	r3, r7, #1
 8004b70:	444b      	add	r3, r9
 8004b72:	106d      	asrs	r5, r5, #1
 8004b74:	429d      	cmp	r5, r3
 8004b76:	bf38      	it	cc
 8004b78:	461d      	movcc	r5, r3
 8004b7a:	0553      	lsls	r3, r2, #21
 8004b7c:	d527      	bpl.n	8004bce <__ssputs_r+0x8e>
 8004b7e:	4629      	mov	r1, r5
 8004b80:	f7ff ff52 	bl	8004a28 <_malloc_r>
 8004b84:	4606      	mov	r6, r0
 8004b86:	b360      	cbz	r0, 8004be2 <__ssputs_r+0xa2>
 8004b88:	6921      	ldr	r1, [r4, #16]
 8004b8a:	464a      	mov	r2, r9
 8004b8c:	f000 fae8 	bl	8005160 <memcpy>
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b9a:	81a3      	strh	r3, [r4, #12]
 8004b9c:	6126      	str	r6, [r4, #16]
 8004b9e:	6165      	str	r5, [r4, #20]
 8004ba0:	444e      	add	r6, r9
 8004ba2:	eba5 0509 	sub.w	r5, r5, r9
 8004ba6:	6026      	str	r6, [r4, #0]
 8004ba8:	60a5      	str	r5, [r4, #8]
 8004baa:	463e      	mov	r6, r7
 8004bac:	42be      	cmp	r6, r7
 8004bae:	d900      	bls.n	8004bb2 <__ssputs_r+0x72>
 8004bb0:	463e      	mov	r6, r7
 8004bb2:	6820      	ldr	r0, [r4, #0]
 8004bb4:	4632      	mov	r2, r6
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	f000 faa8 	bl	800510c <memmove>
 8004bbc:	68a3      	ldr	r3, [r4, #8]
 8004bbe:	1b9b      	subs	r3, r3, r6
 8004bc0:	60a3      	str	r3, [r4, #8]
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	4433      	add	r3, r6
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	2000      	movs	r0, #0
 8004bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bce:	462a      	mov	r2, r5
 8004bd0:	f000 fad4 	bl	800517c <_realloc_r>
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d1e0      	bne.n	8004b9c <__ssputs_r+0x5c>
 8004bda:	6921      	ldr	r1, [r4, #16]
 8004bdc:	4650      	mov	r0, sl
 8004bde:	f7ff feb7 	bl	8004950 <_free_r>
 8004be2:	230c      	movs	r3, #12
 8004be4:	f8ca 3000 	str.w	r3, [sl]
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	e7e9      	b.n	8004bca <__ssputs_r+0x8a>
	...

08004bf8 <_svfiprintf_r>:
 8004bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	4698      	mov	r8, r3
 8004bfe:	898b      	ldrh	r3, [r1, #12]
 8004c00:	061b      	lsls	r3, r3, #24
 8004c02:	b09d      	sub	sp, #116	@ 0x74
 8004c04:	4607      	mov	r7, r0
 8004c06:	460d      	mov	r5, r1
 8004c08:	4614      	mov	r4, r2
 8004c0a:	d510      	bpl.n	8004c2e <_svfiprintf_r+0x36>
 8004c0c:	690b      	ldr	r3, [r1, #16]
 8004c0e:	b973      	cbnz	r3, 8004c2e <_svfiprintf_r+0x36>
 8004c10:	2140      	movs	r1, #64	@ 0x40
 8004c12:	f7ff ff09 	bl	8004a28 <_malloc_r>
 8004c16:	6028      	str	r0, [r5, #0]
 8004c18:	6128      	str	r0, [r5, #16]
 8004c1a:	b930      	cbnz	r0, 8004c2a <_svfiprintf_r+0x32>
 8004c1c:	230c      	movs	r3, #12
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	b01d      	add	sp, #116	@ 0x74
 8004c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2a:	2340      	movs	r3, #64	@ 0x40
 8004c2c:	616b      	str	r3, [r5, #20]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c32:	2320      	movs	r3, #32
 8004c34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c3c:	2330      	movs	r3, #48	@ 0x30
 8004c3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ddc <_svfiprintf_r+0x1e4>
 8004c42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c46:	f04f 0901 	mov.w	r9, #1
 8004c4a:	4623      	mov	r3, r4
 8004c4c:	469a      	mov	sl, r3
 8004c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c52:	b10a      	cbz	r2, 8004c58 <_svfiprintf_r+0x60>
 8004c54:	2a25      	cmp	r2, #37	@ 0x25
 8004c56:	d1f9      	bne.n	8004c4c <_svfiprintf_r+0x54>
 8004c58:	ebba 0b04 	subs.w	fp, sl, r4
 8004c5c:	d00b      	beq.n	8004c76 <_svfiprintf_r+0x7e>
 8004c5e:	465b      	mov	r3, fp
 8004c60:	4622      	mov	r2, r4
 8004c62:	4629      	mov	r1, r5
 8004c64:	4638      	mov	r0, r7
 8004c66:	f7ff ff6b 	bl	8004b40 <__ssputs_r>
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f000 80a7 	beq.w	8004dbe <_svfiprintf_r+0x1c6>
 8004c70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c72:	445a      	add	r2, fp
 8004c74:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c76:	f89a 3000 	ldrb.w	r3, [sl]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 809f 	beq.w	8004dbe <_svfiprintf_r+0x1c6>
 8004c80:	2300      	movs	r3, #0
 8004c82:	f04f 32ff 	mov.w	r2, #4294967295
 8004c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c8a:	f10a 0a01 	add.w	sl, sl, #1
 8004c8e:	9304      	str	r3, [sp, #16]
 8004c90:	9307      	str	r3, [sp, #28]
 8004c92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c96:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c98:	4654      	mov	r4, sl
 8004c9a:	2205      	movs	r2, #5
 8004c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca0:	484e      	ldr	r0, [pc, #312]	@ (8004ddc <_svfiprintf_r+0x1e4>)
 8004ca2:	f7fb fad5 	bl	8000250 <memchr>
 8004ca6:	9a04      	ldr	r2, [sp, #16]
 8004ca8:	b9d8      	cbnz	r0, 8004ce2 <_svfiprintf_r+0xea>
 8004caa:	06d0      	lsls	r0, r2, #27
 8004cac:	bf44      	itt	mi
 8004cae:	2320      	movmi	r3, #32
 8004cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cb4:	0711      	lsls	r1, r2, #28
 8004cb6:	bf44      	itt	mi
 8004cb8:	232b      	movmi	r3, #43	@ 0x2b
 8004cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cc4:	d015      	beq.n	8004cf2 <_svfiprintf_r+0xfa>
 8004cc6:	9a07      	ldr	r2, [sp, #28]
 8004cc8:	4654      	mov	r4, sl
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f04f 0c0a 	mov.w	ip, #10
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cd6:	3b30      	subs	r3, #48	@ 0x30
 8004cd8:	2b09      	cmp	r3, #9
 8004cda:	d94b      	bls.n	8004d74 <_svfiprintf_r+0x17c>
 8004cdc:	b1b0      	cbz	r0, 8004d0c <_svfiprintf_r+0x114>
 8004cde:	9207      	str	r2, [sp, #28]
 8004ce0:	e014      	b.n	8004d0c <_svfiprintf_r+0x114>
 8004ce2:	eba0 0308 	sub.w	r3, r0, r8
 8004ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8004cea:	4313      	orrs	r3, r2
 8004cec:	9304      	str	r3, [sp, #16]
 8004cee:	46a2      	mov	sl, r4
 8004cf0:	e7d2      	b.n	8004c98 <_svfiprintf_r+0xa0>
 8004cf2:	9b03      	ldr	r3, [sp, #12]
 8004cf4:	1d19      	adds	r1, r3, #4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	9103      	str	r1, [sp, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	bfbb      	ittet	lt
 8004cfe:	425b      	neglt	r3, r3
 8004d00:	f042 0202 	orrlt.w	r2, r2, #2
 8004d04:	9307      	strge	r3, [sp, #28]
 8004d06:	9307      	strlt	r3, [sp, #28]
 8004d08:	bfb8      	it	lt
 8004d0a:	9204      	strlt	r2, [sp, #16]
 8004d0c:	7823      	ldrb	r3, [r4, #0]
 8004d0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d10:	d10a      	bne.n	8004d28 <_svfiprintf_r+0x130>
 8004d12:	7863      	ldrb	r3, [r4, #1]
 8004d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d16:	d132      	bne.n	8004d7e <_svfiprintf_r+0x186>
 8004d18:	9b03      	ldr	r3, [sp, #12]
 8004d1a:	1d1a      	adds	r2, r3, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	9203      	str	r2, [sp, #12]
 8004d20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d24:	3402      	adds	r4, #2
 8004d26:	9305      	str	r3, [sp, #20]
 8004d28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004dec <_svfiprintf_r+0x1f4>
 8004d2c:	7821      	ldrb	r1, [r4, #0]
 8004d2e:	2203      	movs	r2, #3
 8004d30:	4650      	mov	r0, sl
 8004d32:	f7fb fa8d 	bl	8000250 <memchr>
 8004d36:	b138      	cbz	r0, 8004d48 <_svfiprintf_r+0x150>
 8004d38:	9b04      	ldr	r3, [sp, #16]
 8004d3a:	eba0 000a 	sub.w	r0, r0, sl
 8004d3e:	2240      	movs	r2, #64	@ 0x40
 8004d40:	4082      	lsls	r2, r0
 8004d42:	4313      	orrs	r3, r2
 8004d44:	3401      	adds	r4, #1
 8004d46:	9304      	str	r3, [sp, #16]
 8004d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4c:	4824      	ldr	r0, [pc, #144]	@ (8004de0 <_svfiprintf_r+0x1e8>)
 8004d4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d52:	2206      	movs	r2, #6
 8004d54:	f7fb fa7c 	bl	8000250 <memchr>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d036      	beq.n	8004dca <_svfiprintf_r+0x1d2>
 8004d5c:	4b21      	ldr	r3, [pc, #132]	@ (8004de4 <_svfiprintf_r+0x1ec>)
 8004d5e:	bb1b      	cbnz	r3, 8004da8 <_svfiprintf_r+0x1b0>
 8004d60:	9b03      	ldr	r3, [sp, #12]
 8004d62:	3307      	adds	r3, #7
 8004d64:	f023 0307 	bic.w	r3, r3, #7
 8004d68:	3308      	adds	r3, #8
 8004d6a:	9303      	str	r3, [sp, #12]
 8004d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d6e:	4433      	add	r3, r6
 8004d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d72:	e76a      	b.n	8004c4a <_svfiprintf_r+0x52>
 8004d74:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d78:	460c      	mov	r4, r1
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	e7a8      	b.n	8004cd0 <_svfiprintf_r+0xd8>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	3401      	adds	r4, #1
 8004d82:	9305      	str	r3, [sp, #20]
 8004d84:	4619      	mov	r1, r3
 8004d86:	f04f 0c0a 	mov.w	ip, #10
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d90:	3a30      	subs	r2, #48	@ 0x30
 8004d92:	2a09      	cmp	r2, #9
 8004d94:	d903      	bls.n	8004d9e <_svfiprintf_r+0x1a6>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0c6      	beq.n	8004d28 <_svfiprintf_r+0x130>
 8004d9a:	9105      	str	r1, [sp, #20]
 8004d9c:	e7c4      	b.n	8004d28 <_svfiprintf_r+0x130>
 8004d9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004da2:	4604      	mov	r4, r0
 8004da4:	2301      	movs	r3, #1
 8004da6:	e7f0      	b.n	8004d8a <_svfiprintf_r+0x192>
 8004da8:	ab03      	add	r3, sp, #12
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	462a      	mov	r2, r5
 8004dae:	4b0e      	ldr	r3, [pc, #56]	@ (8004de8 <_svfiprintf_r+0x1f0>)
 8004db0:	a904      	add	r1, sp, #16
 8004db2:	4638      	mov	r0, r7
 8004db4:	f3af 8000 	nop.w
 8004db8:	1c42      	adds	r2, r0, #1
 8004dba:	4606      	mov	r6, r0
 8004dbc:	d1d6      	bne.n	8004d6c <_svfiprintf_r+0x174>
 8004dbe:	89ab      	ldrh	r3, [r5, #12]
 8004dc0:	065b      	lsls	r3, r3, #25
 8004dc2:	f53f af2d 	bmi.w	8004c20 <_svfiprintf_r+0x28>
 8004dc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dc8:	e72c      	b.n	8004c24 <_svfiprintf_r+0x2c>
 8004dca:	ab03      	add	r3, sp, #12
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	462a      	mov	r2, r5
 8004dd0:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <_svfiprintf_r+0x1f0>)
 8004dd2:	a904      	add	r1, sp, #16
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	f000 f879 	bl	8004ecc <_printf_i>
 8004dda:	e7ed      	b.n	8004db8 <_svfiprintf_r+0x1c0>
 8004ddc:	0800522c 	.word	0x0800522c
 8004de0:	08005236 	.word	0x08005236
 8004de4:	00000000 	.word	0x00000000
 8004de8:	08004b41 	.word	0x08004b41
 8004dec:	08005232 	.word	0x08005232

08004df0 <_printf_common>:
 8004df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df4:	4616      	mov	r6, r2
 8004df6:	4698      	mov	r8, r3
 8004df8:	688a      	ldr	r2, [r1, #8]
 8004dfa:	690b      	ldr	r3, [r1, #16]
 8004dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e00:	4293      	cmp	r3, r2
 8004e02:	bfb8      	it	lt
 8004e04:	4613      	movlt	r3, r2
 8004e06:	6033      	str	r3, [r6, #0]
 8004e08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e0c:	4607      	mov	r7, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	b10a      	cbz	r2, 8004e16 <_printf_common+0x26>
 8004e12:	3301      	adds	r3, #1
 8004e14:	6033      	str	r3, [r6, #0]
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	0699      	lsls	r1, r3, #26
 8004e1a:	bf42      	ittt	mi
 8004e1c:	6833      	ldrmi	r3, [r6, #0]
 8004e1e:	3302      	addmi	r3, #2
 8004e20:	6033      	strmi	r3, [r6, #0]
 8004e22:	6825      	ldr	r5, [r4, #0]
 8004e24:	f015 0506 	ands.w	r5, r5, #6
 8004e28:	d106      	bne.n	8004e38 <_printf_common+0x48>
 8004e2a:	f104 0a19 	add.w	sl, r4, #25
 8004e2e:	68e3      	ldr	r3, [r4, #12]
 8004e30:	6832      	ldr	r2, [r6, #0]
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	42ab      	cmp	r3, r5
 8004e36:	dc26      	bgt.n	8004e86 <_printf_common+0x96>
 8004e38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e3c:	6822      	ldr	r2, [r4, #0]
 8004e3e:	3b00      	subs	r3, #0
 8004e40:	bf18      	it	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	0692      	lsls	r2, r2, #26
 8004e46:	d42b      	bmi.n	8004ea0 <_printf_common+0xb0>
 8004e48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	4638      	mov	r0, r7
 8004e50:	47c8      	blx	r9
 8004e52:	3001      	adds	r0, #1
 8004e54:	d01e      	beq.n	8004e94 <_printf_common+0xa4>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	6922      	ldr	r2, [r4, #16]
 8004e5a:	f003 0306 	and.w	r3, r3, #6
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	bf02      	ittt	eq
 8004e62:	68e5      	ldreq	r5, [r4, #12]
 8004e64:	6833      	ldreq	r3, [r6, #0]
 8004e66:	1aed      	subeq	r5, r5, r3
 8004e68:	68a3      	ldr	r3, [r4, #8]
 8004e6a:	bf0c      	ite	eq
 8004e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e70:	2500      	movne	r5, #0
 8004e72:	4293      	cmp	r3, r2
 8004e74:	bfc4      	itt	gt
 8004e76:	1a9b      	subgt	r3, r3, r2
 8004e78:	18ed      	addgt	r5, r5, r3
 8004e7a:	2600      	movs	r6, #0
 8004e7c:	341a      	adds	r4, #26
 8004e7e:	42b5      	cmp	r5, r6
 8004e80:	d11a      	bne.n	8004eb8 <_printf_common+0xc8>
 8004e82:	2000      	movs	r0, #0
 8004e84:	e008      	b.n	8004e98 <_printf_common+0xa8>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4652      	mov	r2, sl
 8004e8a:	4641      	mov	r1, r8
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	47c8      	blx	r9
 8004e90:	3001      	adds	r0, #1
 8004e92:	d103      	bne.n	8004e9c <_printf_common+0xac>
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	e7c6      	b.n	8004e2e <_printf_common+0x3e>
 8004ea0:	18e1      	adds	r1, r4, r3
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	2030      	movs	r0, #48	@ 0x30
 8004ea6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004eaa:	4422      	add	r2, r4
 8004eac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004eb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	e7c7      	b.n	8004e48 <_printf_common+0x58>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	4622      	mov	r2, r4
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	47c8      	blx	r9
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d0e6      	beq.n	8004e94 <_printf_common+0xa4>
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7d9      	b.n	8004e7e <_printf_common+0x8e>
	...

08004ecc <_printf_i>:
 8004ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	7e0f      	ldrb	r7, [r1, #24]
 8004ed2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ed4:	2f78      	cmp	r7, #120	@ 0x78
 8004ed6:	4691      	mov	r9, r2
 8004ed8:	4680      	mov	r8, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	469a      	mov	sl, r3
 8004ede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ee2:	d807      	bhi.n	8004ef4 <_printf_i+0x28>
 8004ee4:	2f62      	cmp	r7, #98	@ 0x62
 8004ee6:	d80a      	bhi.n	8004efe <_printf_i+0x32>
 8004ee8:	2f00      	cmp	r7, #0
 8004eea:	f000 80d2 	beq.w	8005092 <_printf_i+0x1c6>
 8004eee:	2f58      	cmp	r7, #88	@ 0x58
 8004ef0:	f000 80b9 	beq.w	8005066 <_printf_i+0x19a>
 8004ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004efc:	e03a      	b.n	8004f74 <_printf_i+0xa8>
 8004efe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f02:	2b15      	cmp	r3, #21
 8004f04:	d8f6      	bhi.n	8004ef4 <_printf_i+0x28>
 8004f06:	a101      	add	r1, pc, #4	@ (adr r1, 8004f0c <_printf_i+0x40>)
 8004f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f0c:	08004f65 	.word	0x08004f65
 8004f10:	08004f79 	.word	0x08004f79
 8004f14:	08004ef5 	.word	0x08004ef5
 8004f18:	08004ef5 	.word	0x08004ef5
 8004f1c:	08004ef5 	.word	0x08004ef5
 8004f20:	08004ef5 	.word	0x08004ef5
 8004f24:	08004f79 	.word	0x08004f79
 8004f28:	08004ef5 	.word	0x08004ef5
 8004f2c:	08004ef5 	.word	0x08004ef5
 8004f30:	08004ef5 	.word	0x08004ef5
 8004f34:	08004ef5 	.word	0x08004ef5
 8004f38:	08005079 	.word	0x08005079
 8004f3c:	08004fa3 	.word	0x08004fa3
 8004f40:	08005033 	.word	0x08005033
 8004f44:	08004ef5 	.word	0x08004ef5
 8004f48:	08004ef5 	.word	0x08004ef5
 8004f4c:	0800509b 	.word	0x0800509b
 8004f50:	08004ef5 	.word	0x08004ef5
 8004f54:	08004fa3 	.word	0x08004fa3
 8004f58:	08004ef5 	.word	0x08004ef5
 8004f5c:	08004ef5 	.word	0x08004ef5
 8004f60:	0800503b 	.word	0x0800503b
 8004f64:	6833      	ldr	r3, [r6, #0]
 8004f66:	1d1a      	adds	r2, r3, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6032      	str	r2, [r6, #0]
 8004f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f74:	2301      	movs	r3, #1
 8004f76:	e09d      	b.n	80050b4 <_printf_i+0x1e8>
 8004f78:	6833      	ldr	r3, [r6, #0]
 8004f7a:	6820      	ldr	r0, [r4, #0]
 8004f7c:	1d19      	adds	r1, r3, #4
 8004f7e:	6031      	str	r1, [r6, #0]
 8004f80:	0606      	lsls	r6, r0, #24
 8004f82:	d501      	bpl.n	8004f88 <_printf_i+0xbc>
 8004f84:	681d      	ldr	r5, [r3, #0]
 8004f86:	e003      	b.n	8004f90 <_printf_i+0xc4>
 8004f88:	0645      	lsls	r5, r0, #25
 8004f8a:	d5fb      	bpl.n	8004f84 <_printf_i+0xb8>
 8004f8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f90:	2d00      	cmp	r5, #0
 8004f92:	da03      	bge.n	8004f9c <_printf_i+0xd0>
 8004f94:	232d      	movs	r3, #45	@ 0x2d
 8004f96:	426d      	negs	r5, r5
 8004f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f9c:	4859      	ldr	r0, [pc, #356]	@ (8005104 <_printf_i+0x238>)
 8004f9e:	230a      	movs	r3, #10
 8004fa0:	e011      	b.n	8004fc6 <_printf_i+0xfa>
 8004fa2:	6821      	ldr	r1, [r4, #0]
 8004fa4:	6833      	ldr	r3, [r6, #0]
 8004fa6:	0608      	lsls	r0, r1, #24
 8004fa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fac:	d402      	bmi.n	8004fb4 <_printf_i+0xe8>
 8004fae:	0649      	lsls	r1, r1, #25
 8004fb0:	bf48      	it	mi
 8004fb2:	b2ad      	uxthmi	r5, r5
 8004fb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fb6:	4853      	ldr	r0, [pc, #332]	@ (8005104 <_printf_i+0x238>)
 8004fb8:	6033      	str	r3, [r6, #0]
 8004fba:	bf14      	ite	ne
 8004fbc:	230a      	movne	r3, #10
 8004fbe:	2308      	moveq	r3, #8
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fc6:	6866      	ldr	r6, [r4, #4]
 8004fc8:	60a6      	str	r6, [r4, #8]
 8004fca:	2e00      	cmp	r6, #0
 8004fcc:	bfa2      	ittt	ge
 8004fce:	6821      	ldrge	r1, [r4, #0]
 8004fd0:	f021 0104 	bicge.w	r1, r1, #4
 8004fd4:	6021      	strge	r1, [r4, #0]
 8004fd6:	b90d      	cbnz	r5, 8004fdc <_printf_i+0x110>
 8004fd8:	2e00      	cmp	r6, #0
 8004fda:	d04b      	beq.n	8005074 <_printf_i+0x1a8>
 8004fdc:	4616      	mov	r6, r2
 8004fde:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fe2:	fb03 5711 	mls	r7, r3, r1, r5
 8004fe6:	5dc7      	ldrb	r7, [r0, r7]
 8004fe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fec:	462f      	mov	r7, r5
 8004fee:	42bb      	cmp	r3, r7
 8004ff0:	460d      	mov	r5, r1
 8004ff2:	d9f4      	bls.n	8004fde <_printf_i+0x112>
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d10b      	bne.n	8005010 <_printf_i+0x144>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	07df      	lsls	r7, r3, #31
 8004ffc:	d508      	bpl.n	8005010 <_printf_i+0x144>
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	6861      	ldr	r1, [r4, #4]
 8005002:	4299      	cmp	r1, r3
 8005004:	bfde      	ittt	le
 8005006:	2330      	movle	r3, #48	@ 0x30
 8005008:	f806 3c01 	strble.w	r3, [r6, #-1]
 800500c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005010:	1b92      	subs	r2, r2, r6
 8005012:	6122      	str	r2, [r4, #16]
 8005014:	f8cd a000 	str.w	sl, [sp]
 8005018:	464b      	mov	r3, r9
 800501a:	aa03      	add	r2, sp, #12
 800501c:	4621      	mov	r1, r4
 800501e:	4640      	mov	r0, r8
 8005020:	f7ff fee6 	bl	8004df0 <_printf_common>
 8005024:	3001      	adds	r0, #1
 8005026:	d14a      	bne.n	80050be <_printf_i+0x1f2>
 8005028:	f04f 30ff 	mov.w	r0, #4294967295
 800502c:	b004      	add	sp, #16
 800502e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	f043 0320 	orr.w	r3, r3, #32
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	4833      	ldr	r0, [pc, #204]	@ (8005108 <_printf_i+0x23c>)
 800503c:	2778      	movs	r7, #120	@ 0x78
 800503e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	6831      	ldr	r1, [r6, #0]
 8005046:	061f      	lsls	r7, r3, #24
 8005048:	f851 5b04 	ldr.w	r5, [r1], #4
 800504c:	d402      	bmi.n	8005054 <_printf_i+0x188>
 800504e:	065f      	lsls	r7, r3, #25
 8005050:	bf48      	it	mi
 8005052:	b2ad      	uxthmi	r5, r5
 8005054:	6031      	str	r1, [r6, #0]
 8005056:	07d9      	lsls	r1, r3, #31
 8005058:	bf44      	itt	mi
 800505a:	f043 0320 	orrmi.w	r3, r3, #32
 800505e:	6023      	strmi	r3, [r4, #0]
 8005060:	b11d      	cbz	r5, 800506a <_printf_i+0x19e>
 8005062:	2310      	movs	r3, #16
 8005064:	e7ac      	b.n	8004fc0 <_printf_i+0xf4>
 8005066:	4827      	ldr	r0, [pc, #156]	@ (8005104 <_printf_i+0x238>)
 8005068:	e7e9      	b.n	800503e <_printf_i+0x172>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	f023 0320 	bic.w	r3, r3, #32
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	e7f6      	b.n	8005062 <_printf_i+0x196>
 8005074:	4616      	mov	r6, r2
 8005076:	e7bd      	b.n	8004ff4 <_printf_i+0x128>
 8005078:	6833      	ldr	r3, [r6, #0]
 800507a:	6825      	ldr	r5, [r4, #0]
 800507c:	6961      	ldr	r1, [r4, #20]
 800507e:	1d18      	adds	r0, r3, #4
 8005080:	6030      	str	r0, [r6, #0]
 8005082:	062e      	lsls	r6, r5, #24
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	d501      	bpl.n	800508c <_printf_i+0x1c0>
 8005088:	6019      	str	r1, [r3, #0]
 800508a:	e002      	b.n	8005092 <_printf_i+0x1c6>
 800508c:	0668      	lsls	r0, r5, #25
 800508e:	d5fb      	bpl.n	8005088 <_printf_i+0x1bc>
 8005090:	8019      	strh	r1, [r3, #0]
 8005092:	2300      	movs	r3, #0
 8005094:	6123      	str	r3, [r4, #16]
 8005096:	4616      	mov	r6, r2
 8005098:	e7bc      	b.n	8005014 <_printf_i+0x148>
 800509a:	6833      	ldr	r3, [r6, #0]
 800509c:	1d1a      	adds	r2, r3, #4
 800509e:	6032      	str	r2, [r6, #0]
 80050a0:	681e      	ldr	r6, [r3, #0]
 80050a2:	6862      	ldr	r2, [r4, #4]
 80050a4:	2100      	movs	r1, #0
 80050a6:	4630      	mov	r0, r6
 80050a8:	f7fb f8d2 	bl	8000250 <memchr>
 80050ac:	b108      	cbz	r0, 80050b2 <_printf_i+0x1e6>
 80050ae:	1b80      	subs	r0, r0, r6
 80050b0:	6060      	str	r0, [r4, #4]
 80050b2:	6863      	ldr	r3, [r4, #4]
 80050b4:	6123      	str	r3, [r4, #16]
 80050b6:	2300      	movs	r3, #0
 80050b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050bc:	e7aa      	b.n	8005014 <_printf_i+0x148>
 80050be:	6923      	ldr	r3, [r4, #16]
 80050c0:	4632      	mov	r2, r6
 80050c2:	4649      	mov	r1, r9
 80050c4:	4640      	mov	r0, r8
 80050c6:	47d0      	blx	sl
 80050c8:	3001      	adds	r0, #1
 80050ca:	d0ad      	beq.n	8005028 <_printf_i+0x15c>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	079b      	lsls	r3, r3, #30
 80050d0:	d413      	bmi.n	80050fa <_printf_i+0x22e>
 80050d2:	68e0      	ldr	r0, [r4, #12]
 80050d4:	9b03      	ldr	r3, [sp, #12]
 80050d6:	4298      	cmp	r0, r3
 80050d8:	bfb8      	it	lt
 80050da:	4618      	movlt	r0, r3
 80050dc:	e7a6      	b.n	800502c <_printf_i+0x160>
 80050de:	2301      	movs	r3, #1
 80050e0:	4632      	mov	r2, r6
 80050e2:	4649      	mov	r1, r9
 80050e4:	4640      	mov	r0, r8
 80050e6:	47d0      	blx	sl
 80050e8:	3001      	adds	r0, #1
 80050ea:	d09d      	beq.n	8005028 <_printf_i+0x15c>
 80050ec:	3501      	adds	r5, #1
 80050ee:	68e3      	ldr	r3, [r4, #12]
 80050f0:	9903      	ldr	r1, [sp, #12]
 80050f2:	1a5b      	subs	r3, r3, r1
 80050f4:	42ab      	cmp	r3, r5
 80050f6:	dcf2      	bgt.n	80050de <_printf_i+0x212>
 80050f8:	e7eb      	b.n	80050d2 <_printf_i+0x206>
 80050fa:	2500      	movs	r5, #0
 80050fc:	f104 0619 	add.w	r6, r4, #25
 8005100:	e7f5      	b.n	80050ee <_printf_i+0x222>
 8005102:	bf00      	nop
 8005104:	0800523d 	.word	0x0800523d
 8005108:	0800524e 	.word	0x0800524e

0800510c <memmove>:
 800510c:	4288      	cmp	r0, r1
 800510e:	b510      	push	{r4, lr}
 8005110:	eb01 0402 	add.w	r4, r1, r2
 8005114:	d902      	bls.n	800511c <memmove+0x10>
 8005116:	4284      	cmp	r4, r0
 8005118:	4623      	mov	r3, r4
 800511a:	d807      	bhi.n	800512c <memmove+0x20>
 800511c:	1e43      	subs	r3, r0, #1
 800511e:	42a1      	cmp	r1, r4
 8005120:	d008      	beq.n	8005134 <memmove+0x28>
 8005122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005126:	f803 2f01 	strb.w	r2, [r3, #1]!
 800512a:	e7f8      	b.n	800511e <memmove+0x12>
 800512c:	4402      	add	r2, r0
 800512e:	4601      	mov	r1, r0
 8005130:	428a      	cmp	r2, r1
 8005132:	d100      	bne.n	8005136 <memmove+0x2a>
 8005134:	bd10      	pop	{r4, pc}
 8005136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800513a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800513e:	e7f7      	b.n	8005130 <memmove+0x24>

08005140 <_sbrk_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4d06      	ldr	r5, [pc, #24]	@ (800515c <_sbrk_r+0x1c>)
 8005144:	2300      	movs	r3, #0
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	602b      	str	r3, [r5, #0]
 800514c:	f7fb fe2a 	bl	8000da4 <_sbrk>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_sbrk_r+0x1a>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_sbrk_r+0x1a>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	200002a4 	.word	0x200002a4

08005160 <memcpy>:
 8005160:	440a      	add	r2, r1
 8005162:	4291      	cmp	r1, r2
 8005164:	f100 33ff 	add.w	r3, r0, #4294967295
 8005168:	d100      	bne.n	800516c <memcpy+0xc>
 800516a:	4770      	bx	lr
 800516c:	b510      	push	{r4, lr}
 800516e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005176:	4291      	cmp	r1, r2
 8005178:	d1f9      	bne.n	800516e <memcpy+0xe>
 800517a:	bd10      	pop	{r4, pc}

0800517c <_realloc_r>:
 800517c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005180:	4680      	mov	r8, r0
 8005182:	4615      	mov	r5, r2
 8005184:	460c      	mov	r4, r1
 8005186:	b921      	cbnz	r1, 8005192 <_realloc_r+0x16>
 8005188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800518c:	4611      	mov	r1, r2
 800518e:	f7ff bc4b 	b.w	8004a28 <_malloc_r>
 8005192:	b92a      	cbnz	r2, 80051a0 <_realloc_r+0x24>
 8005194:	f7ff fbdc 	bl	8004950 <_free_r>
 8005198:	2400      	movs	r4, #0
 800519a:	4620      	mov	r0, r4
 800519c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a0:	f000 f81a 	bl	80051d8 <_malloc_usable_size_r>
 80051a4:	4285      	cmp	r5, r0
 80051a6:	4606      	mov	r6, r0
 80051a8:	d802      	bhi.n	80051b0 <_realloc_r+0x34>
 80051aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80051ae:	d8f4      	bhi.n	800519a <_realloc_r+0x1e>
 80051b0:	4629      	mov	r1, r5
 80051b2:	4640      	mov	r0, r8
 80051b4:	f7ff fc38 	bl	8004a28 <_malloc_r>
 80051b8:	4607      	mov	r7, r0
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d0ec      	beq.n	8005198 <_realloc_r+0x1c>
 80051be:	42b5      	cmp	r5, r6
 80051c0:	462a      	mov	r2, r5
 80051c2:	4621      	mov	r1, r4
 80051c4:	bf28      	it	cs
 80051c6:	4632      	movcs	r2, r6
 80051c8:	f7ff ffca 	bl	8005160 <memcpy>
 80051cc:	4621      	mov	r1, r4
 80051ce:	4640      	mov	r0, r8
 80051d0:	f7ff fbbe 	bl	8004950 <_free_r>
 80051d4:	463c      	mov	r4, r7
 80051d6:	e7e0      	b.n	800519a <_realloc_r+0x1e>

080051d8 <_malloc_usable_size_r>:
 80051d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051dc:	1f18      	subs	r0, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bfbc      	itt	lt
 80051e2:	580b      	ldrlt	r3, [r1, r0]
 80051e4:	18c0      	addlt	r0, r0, r3
 80051e6:	4770      	bx	lr

080051e8 <_init>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	bf00      	nop
 80051ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ee:	bc08      	pop	{r3}
 80051f0:	469e      	mov	lr, r3
 80051f2:	4770      	bx	lr

080051f4 <_fini>:
 80051f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f6:	bf00      	nop
 80051f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fa:	bc08      	pop	{r3}
 80051fc:	469e      	mov	lr, r3
 80051fe:	4770      	bx	lr
